Tema 4: NP-completitud Tema 4: NP-completitud Tema 4: NP-completitud Recordatorio: Problemas y Lenguajes Recordemos que un problema computacional de decisión P(x) es equivalente a un lenguaje: {x A : P(x) SI} Y que un lenguaje L sobre A deﬁne un problema: Dada x A, ¿Pertenece x a L? La teoría se suele explicar en términos de lenguajes y la práctica en términos de problemas, PERTENCEL(x): Toda deﬁnición en términos de lenguajes tiene una deﬁnición equivalente en términos de problemas de decisión y recíprocamente. Para acortar la distancia entre teoría y la práctica, en la mayoría de los casos vamos a expresar las deﬁniciones sólo en términos de problemas. Tema 4: NP-completitud Un problema de decisión P1(x) es reducible a un problema de decisión P2(y) donde x X,y Y, P1(x) P2(y) si y solo si existe un algoritmo determinista que en espacio logarítmico calcula una función REDU : X Y de tal manera que P1(x) P2(REDU(x)) Problema P1(x) reducible a P2(y): Algoritmo P2 Algoritmo P1 SI/NO Tema 4: NP-completitud Un problema de decisión P1(x) es reducible a un problema de decisión P2(y) donde x X,y Y, P1(x) P2(y) si y solo si existe un algoritmo determinista que en espacio logarítmico calcula una función REDU : X Y de tal manera que P1(x) P2(REDU(x)) Problema P1(x) reducible a P2(y): Algoritmo P2 Algoritmo P1 REDU(x) SI/NO Tema 4: NP-completitud Un problema de decisión P1(x) es reducible a un problema de decisión P2(y) donde x X,y Y, P1(x) P2(y) si y solo si existe un algoritmo determinista que en espacio logarítmico calcula una función REDU : X Y de tal manera que P1(x) P2(REDU(x)) Problema P1(x) reducible a P2(y): Algoritmo P2 Algoritmo P1 REDU(x) REDU(x) SI/NO Tema 4: NP-completitud En deﬁnitiva, P2 es al menos tan difícil como P1: se resiste más a que se encuentre una solución sencilla Tema 4: NP-completitud La idea es que la reducción (transformación entre problemas) tiene que poder realizarse de forma "eﬁciente". Para nosotros la reducción tiene que poder realizarse de forma "muy rápida", que lo concretamos como espacio logarítmico. Tema 4: NP-completitud Si tenemos dos problemas P1(x) y P2(y) para demostrar que P1(x) P2(y) hay que: P1 en una entrada, y REDU(x), del problema P2. 2 Comprobar que dicho algoritmo es logarítmico en espacio. 3 Comprobar que si P1(x) tiene solución positiva, entonces P2(y) también la tiene. 4 Comprobar que si P2(y) tiene solución positiva, entonces P1(x) también la tiene. Tema 4: NP-completitud El Problema del Viajante de Comercio (VC) Versión decisión Datos: Un conjunto ﬁnito de ciudades C {c1,...,cm} Una función de distancia d : C C N Una cota B N Pregunta: sola vez y de coste no superior a B? Es decir, determinar si existe un orden de las ciudades (cπ(1),...,cπ(n)) tal que ¿Existe un circuito que visite todas las ciudades una m1 i d(cπ(i),cπ(i1)) ! d(cπ(m),cπ(1)) B Tema 4: NP-completitud El Problema del Circuito Hamiltoniano (CH) Datos: Un grafo no dirigido G (V,E). Pregunta: ¿Existe un circuito hamiltoniano? Tema 4: NP-completitud El Problema del Circuito Hamiltoniano (CH) Datos: Un grafo no dirigido G (V,E). Pregunta: Un circuito hamiltoniano es un camino que parte de un nodo para llegar a él mismo, visitando todos los nodos del grafo una y solo una vez. ¿Existe un circuito hamiltoniano? Tema 4: NP-completitud Reducción del Circuito Hamiltoniano al problema del Viajante de Comercio: CH VC Supongamos una ejemplo del Circuito Hamiltoniano G (V,E) con V m. Construimos el siguiente ejemplo del Viajante de Comercio: Ciudades C V Distancia: d(vi,vj) (cid:26) si (vi,vj) E si (vi,vj) 6 E Cota: B m Tema 4: NP-completitud Si existe un circuito hamiltoniano existe un orden de viaje de valor menor o igual a m (el correspondiente al circuito hamiltoniano). Si existe un orden de viaje de valor menor o igual a m, entonces todos los arcos tienen coste 1, y dicho circuito es hamiltoniano en el grafo original. Tema 4: NP-completitud Si P1 P2 y P2 P3, entonces P1 P3. La demostración se basa en la composición de las reducciones de P1 a P2 ( mediante P1 calculada por M1) y de P2 a L3 (mediante R2 calculada por M2). La composición no puede ser poner a trabajar M2 sobre la salida de M1: R1(x): Entonces usaríamos un espacio intermedio polinómico para almacenar M1(x) y la complejidad de la composición en espacio sería polinómica. La forma de funcionar es que cada vez que M2 necesita una casilla se la pide a M1 que la calcula en ese momento, usando un contador binario para determinar la casilla exacta. P1 y P2 se dicen equivalentes si y solo si P1 P2 y P2 P1. Tema 4: NP-completitud R1(x) Tema 4: NP-completitud R2(R1(x)) R1(x) Tema 4: NP-completitud R2(R1(x)) R2(R1(x)) Son dos condiciones la primera es fácil de comprobar, la segunda no. Los problemas NP-completos son los más difíciles o típicos dentro de la clase NP. Dada la deﬁnición, a priori no tendría porqué existir ningún lenguaje NP-completo. Esta deﬁnición se extiende a otras clases: Tema 4: NP-completitud P1 P2 y P2 P1 Esta es una relación de equivalencia que divide el conjunto de los problemas en clases de equivalencia. En particular esta relación sobre NP queda de la siguiente forma: (Siempre SI - Siempre NO) Tema 4: NP-completitud Consistencia en Lógica Proposicional (SAT) Datos: Un conjunto U {p1,...,pm} de símbolos proposicionales y una colección C de cláusulas sobre estos símbolos. PREGUNTA: EJEMPLO: ¿Son consistentes las cláusulas? U {p1,p2}, C {p1 p2,p1p2} La respuestas es SI, ya que todas las cláusulas se satisfacen haciendo p1 y p2 verdaderas. En notación matemática t(p1) t(p2) V. Tema 4: NP-completitud U {p1,p2}, C {p1 p2,p1 p2,p1} En este caso, la respuesta es NO. Para satisfacer la tercera cláusula, t(p1) F (p1 es falsa). En estas condiciones, para satisfacer la segunda, tenemos que tener t(p2) F. Y ahora con p1 y p2 falsas, es imposible satisfacer la primera. Tema 4: NP-completitud Teorema de Cook El problema de la consistencia en lógica proposicional (SAT) es NP-completo Demostración: Lo primero es demostrar que es un problema de NP. Esto es sencillo con el siguiente algoritmo no-determinista: Para cada símbolo en U seleccionar un valor de verdad (V ó F). Para cada cláusula comprobar si se satisface. Tema 4: NP-completitud Teorema de Cook: Reducción Ahora hay que demostrar que si un problema, Pr(x), está en NP, entonces dicho lenguaje se reduce a SAT. Supongamos Pr(x) en NP, la reducción consiste en transformar la entrada al problema x (se suponen una palabra) : en un ejemplo de SAT tal que Pr(x)Si si y solo si el ejemplo es consistente. Esta transformación tiene que hacerse en espacio logarítmico. Tema 4: NP-completitud Como Pr(x) está en NP, entonces existe una Máquina de Turing no determinista M que decide Pr(x) en tiempo polinómico (con un polinomio p(n)), con un estado de aceptación qa (para las respuestas positivas) y uno de rechazo qr (para las respuestas negativas) y una sola cinta (que supondremos ilimitada solo por la derecha). Supondremos p(n) n. Vamos a construir una transformación que depende de esta máquina: REDUM : A SAT tal que Pr(x) Si M acepta x REDUM(x) es consistente. Tema 4: NP-completitud Teorema de Cook: Notación Sea Q {q0,...,qr}, Si A {s1,...,sv} hagamos s0 y B {s0,s1,...,sv} {}A. Sea l el número máximo de opciones de M (supondremos que siempre hay l opciones excepto en los estados de aceptación y rechazo que no hay ninguna). Como la máquina da p(n) pasos, el número máximo de casillas visitadas es p(n)1. r Q1, q1 qa, q2 qr. Tema 4: NP-completitud Teorema de Cook: Variables Proposicionales Hay cuatro tipos de variables: 0 i p(n), Q[i,k], En el momento i, la máquina M está en el estado qk. H[i,j], En el momento i, la cabeza está en la casilla j. S[i,j,k], En el momento i, la casila j contiene el símbolo sk O(i,k), En el momento i, la máquina elige la opción k. 0 k r 0 i p(n), 0 j p(n) 0 i p(n), 0 k v 0 j p(n), 1 k l 0 i p(n), Se supone que si la máquina termina en el instante j, todas las variables permanecen inalteradas en los instantes i j hasta p(n). El número de variables es polinómico y se pueden calcular en espacio logarítmico. Tema 4: NP-completitud Grupo 1: Estado de la Máquina Q[i,0]Q[i,1]Q[i,r], 0 i p(n) Q[i,j]Q[i,j], 0 i p(n), 0 j j r Tema 4: NP-completitud Grupo 2: Cabeza de Lectura H[i,0]H[i,1]H[i,p(n)], 0 i p(n) H[i,j]H[i,j], 0 i p(n), 0 j j p(n) Tema 4: NP-completitud Grupo 3: Casillas S[i,j,0]S[i,j,1]S[i,j,v], 0 i p(n), 0 j p(n) S[i,j,k]S[i,j,k], 0 i p(n), 0 j p(n), 0 k k v Tema 4: NP-completitud Grupo 4: Conﬁguración Inicial Q[0,0], estado 0. H[0,0], casilla 0. Si la palabra de entrada es: x sk1 ...skn entonces se introducen las cláusulas: en el momento inicial (0), la máquina está en el , en el momento inicial (0), la cabeza está en la S[0,0,k1],S[0,1,k2],...,S[0,n1,kn] Inicialmente, los símbolos de la palabra x están en las n primeras casillas de la cinta Estas son las únicas cláusulas que dependen de la entrada. S[0,n,0],S[0,n1,0],...,S[0,p(n),0] Inicialmente, el resto de las casillas de entrada contienen el síbolo B s0. Tema 4: NP-completitud Grupo 5: No-Determinismo O(i,1)O(i,l), En cada momento la máquina toma una opción. 0 i p(n)1. O(i,j)O(i,j), La máquina no puede tomar dos opciones a la vez en un momento dado. 1 j,j l, j 6 j. 0 i p(n)1, Tema 4: NP-completitud Grupo 6: Funcionamiento de la Máquina Si δ(qk,sd) {(qk1,sd1,m1),...,(qkl,sdl,ml)}, entonces añadimos todas las cláusulas: H[i,j]Q[i,k]S[i,j,d]O(i,e)Q[i 1,ke] H[i,j]Q[i,k]S[i,j,d]O(i,e)S[i 1,j,de] H[i,j]Q[i,k]S[i,j,d]O(i,e)H[i 1,j me] 0 i p(n)1, 0 j p(n), 0 k r, 0 d v, 1 e l Tema 4: NP-completitud Grupo 7: Continuidad de contenidos H[i,j]S[i,j,d]S[i 1,j,d] 0 i p(n)1, 0 j,j p(n),(j 6 j) 0 d v Tema 4: NP-completitud Grupo 8: Funcionamiento de la Máquina, después de parar Si δ(qk,sd) /0, entonces añadimos todas las cláusulas: H[i,j]Q[i,k]S[i,j,d]Q[i 1,k] H[i,j]Q[i,k]S[i,j,d]S[i 1,j,d] H[i,j]Q[i,k]S[i,j,d]H[i 1,j] 0 i p(n)1, 0 j p(n), 0 k r, 0 d v, 1 e l Tema 4: NP-completitud Grupo 9: Condición de aceptación Q[p(n),1]: En el último paso, p(n), la máquina se encuentra en un estado de aceptación. Tema 4: NP-completitud Está claro que por la forma de construir la máquina. Las clásulas reproducen exactamente el funcionamiento de la máquina para la palabra de entrada e incluyen una cláusula que indica que la palabra es aceptada. La libertad está en elegir el valor de verdad de las opciones que puede coger la MT. El resto de las variables tienen un valor de verdad determinado dada la opción elegida. Si al ﬁnal se puede satisfacer la cláusula Q[p(n),1] es que se puede llegar a un estado de aceptación. Entonces la palabra es aceptada si y solo si todas es posible satisfacer todas las cláusulas. Tema 4: NP-completitud La reducción que hemos realizado tiene una complejidad espacio logarítmica en función de la longitud de x: x n. Primero, n se representa con t log(n) bits. El cálculo de p(n) requiere realizar varias operaciones, multiplicaciones y sumas. El número de operaciones es ﬁjo, por lo que el espacio necesario será del orden de t log(n). p(n) se representará también con un número de cifras que será del orden de t log(n). Finalmente, toda la transformación maneja índices que varían entre 0 y p(n) o entre dos valores constantes. En el segundo caso, el espacio no varía en función de la longitud de x, y en el primer caso se necesita un espacio de orden t log(n) (el espacio necesario para el índice más grande) para almacenarlos. Luego, la complejidad en espacio de toda la transformación es de orden O(log(n)). Tema 4: NP-completitud Supongamos que queremos demostrar que Pr es NP-completo. Tenemos que hacer: Demostrar que Pr está en NP. Determinar un problema NP-completo ya conocido Pr, y demostrar que Pr Pr Tema 4: NP-completitud Hay dos formas de entender 3-SAT: a lo más 3 literates y exactamente 3 literales. Es NP ya que es un caso particular de SAT y éste ya estaba en NP: el mismo algoritmo vale. Para demostrar que es completo para la clase NP, no realizamos una demostración similar a la del teorema de Cook. Simplemente, reducimos SAT a 3-SAT. Para ello, dado un ejemplo de SAT tenemos que construir un ejemplo de 3-SAT que tenga la misma respuesta: las cláusulas son consistentes o inconsistentes en ambos casos a la vez. Tema 4: NP-completitud SAT 3-SAT Supongamos un ejemplo de SAT, con símbolos U y un conjunto de cláusulas C. Construimos un ejemplo de 3-SAT, que tiene como símbolos los de U y algunos adicionales y cuyas cláusulas, C, se obtienen de C de la siguiente forma: Las cláusulas de C de longitud menor o igual a 3 se añaden tal cual a C. Tema 4: NP-completitud SAT 3-SAT (Cont.) La reducción se basa en el siguiente hecho: Si tengo la fórmula P Q donde P y Q son dos fórmulas, entonces esta formula se puede satisfacer si y solo si se puede satisfacer P x, Q x Tema 4: NP-completitud SAT 3-SAT (Cont.) La reducción se basa en el siguiente hecho: Si tengo la fórmula P Q donde P y Q son dos fórmulas, entonces esta formula se puede satisfacer si y solo si se puede satisfacer P x, Q x donde x es un símbolo proposicional que no aparecía en la fórmula. Si estas dos fórmulas son ciertas entonces haciendo resolución en x, deduzco que P Q se puede satisfacer. Si P Q se puede satisfacer, entonces existe una asignación con la que P o Q es cierta. Entonces si P es cierta, hago x falso y en caso contrario hago x verdadero: está claro que ambas cláusulas se pueden satisfacer. Tema 4: NP-completitud SAT 3-SAT (Cont.) Para cada clásula en C de longitud mayor o igual que 4: l1l2lk, símbolos proposicionales x2,...,xk2 y las cláusulas k 4, donde l1,...,lk son literales, añado l1l2x2, x2l3x3, ,xk3lk2xk2, xk2lk1lk, Tema 4: NP-completitud La demostración de que esta transformación es una verdadera reducción, se basa en comprobar que para cada cláusula l1l2lk, este es el resultado de aplicar la regla básica k 3 veces con las variables x2,...,xk2 La primera se aplica, añadiendo x2 y transformando en l1l2x2, x2l3l4lk Ahora se aplica recursiva la misma operación a x2l3l4lk, pero añadiendo cada vez una variable distinta xk, hasta que nos quedemos con una cláusula de longitud 3. Tema 4: NP-completitud p r s t q Es importante señalar que para que el algoritmo sea espacio logarítmico, no se puede hacer de forma recursiva calculando las cláusulas intermedias (esas cláusulas pueden ser de tamaño del mismo orden que la entrada). Hay que hacerlo de forma iterativa como se explicó al principio. Tema 4: NP-completitud p r s t q p r x2 x2 s t q Es importante señalar que para que el algoritmo sea espacio logarítmico, no se puede hacer de forma recursiva calculando las cláusulas intermedias (esas cláusulas pueden ser de tamaño del mismo orden que la entrada). Hay que hacerlo de forma iterativa como se explicó al principio. Tema 4: NP-completitud p r s t q p r x2 x2 s t q x2 s x3 x3 t q Es importante señalar que para que el algoritmo sea espacio logarítmico, no se puede hacer de forma recursiva calculando las cláusulas intermedias (esas cláusulas pueden ser de tamaño del mismo orden que la entrada). Hay que hacerlo de forma iterativa como se explicó al principio. Tema 4: NP-completitud 3-SAT podemos reducirlo a este problema, añadiendo x1,x2 y x3 y añadiendo a toda cláusula de longitud menor que 3, alguna o varias de estas variables. Por ejemplo t se transformaría en t x1x2. A continuación añadimos cláusulas que fuercen a estas variables a ser falsas: todas las cláusulas de tamaño 3 con estas 3 variables, excepto x1x2x3. Estas 7 cláusulas solo se pueden satisfacer si x1,x2,x3 son falsas y las nuevas cláusulas son equivalentes a las primeras. Tema 4: NP-completitud Consideremos un problema 2-SAT, entonces construimos el grafo: Nodos: Variables y sus negaciones (todos los posibles literales) Arcos: (α,β) es un arco si y solo si (αβ) está en el problema. Tema 4: NP-completitud C {x1x2,x1x3,x1x2,x2x3} x3 Grafo: x1 x2 Teorema El conjunto de cláusulas C es consistente si y solo si no existe un par de nodos x,x, tal que existe un camino de x a x y otro camino de x a x. Tema 4: NP-completitud C {x1x2,x1x3,x1x2,x2x3} x3 Grafo: x1x3 x1x2 x3x2 x1 x2 Teorema El conjunto de cláusulas C es consistente si y solo si no existe un par de nodos x,x, tal que existe un camino de x a x y otro camino de x a x. Tema 4: NP-completitud C {x1x2,x1x3,x1x2,x2x3} x3 Grafo: x1 x2 Las deducciones son los caminos. Si hay un camino de x a x, se deduce x Si hay un camino de x a x, se deduce x Teorema El conjunto de cláusulas C es consistente si y solo si no existe un par de nodos x,x, tal que existe un camino de x a x y otro camino de x a x. Tema 4: NP-completitud C {x1x2,x1x3,x1x2,x2x3} x3 Grafo: x1 x2 Esto demuestra el complementario de 2-SAT está en NL, pero como NLCoNL, 2-SAT está en NL Las deducciones son los caminos. Si hay un camino de x a x, se deduce x Si hay un camino de x a x, se deduce x Teorema El conjunto de cláusulas C es consistente si y solo si no existe un par de nodos x,x, tal que existe un camino de x a x y otro camino de x a x. Tema 4: NP-completitud Son aquellas en las que, a lo más, existe un literal positivo. Idea del algoritmo polinómico: proposicionales). (V el conjunto de variables Se consideran los conjuntos C1 (todos los literales son negativos) y C2 (existe un literal positivo). Sea H un conjunto de variables proposicionales que inicialmente es igual a las variables que aparecen en las cláusulas de longitud 1 de C2. La idea es que este conjunto contenga las variables tienen que ser necesariamente verdad. Tema 4: NP-completitud Algoritmo (Cont.) Mientras H cambie, examinar las cláusulas de C2, si alguna es de la forma z1z2zi y con todas las variables z1,...,zi en el conjunto H y la variable y no en H, entonces añadir y a H. ( Como z1z2zi y es equivalente a (z1z2zi) y, si todos los antecedentes son verdaderos, entonces el consecuente también lo tiene que ser). Una vez calculado H se hacen verdad las variables de este conjunto y falsas las de V H. La consistencia es equivalente a que para cada cláusula en C1 exista un literal con su variable en V H. Tema 4: NP-completitud Datos: Un conjunto de cláusulas con dos literales y un valor K 0. Pregunta: ¿Pueden satisfacerse, al menos, K cláusulas? Tema 4: NP-completitud Reducción: 3-SAT MAX2SAT Para ello cada cláusula de longitud 3, x y z se transforma en las siguientes 10 cláusulas (w es una nueva variable añadida), x, y, x w, z, w, x y, y z, z x, y w, z w Se selecciona K 7m, donde m es el número de cláusulas. Técnica: Construcción de Gadgets Esto se puede comprobar, viendo que para cada cláusula, si x y z es verdadero cláusulas (pero no más). Si x y z es falso, entonces nunca podemos llegar a Tema 4: NP-completitud Tema 4: NP-completitud 3-SAT es NP-completo si hacemos que cada literal nunca aparezca más de dos veces y cada variable más de tres veces, pero pueden existir cláusulas de longitud menor que 3. Hemos de probar que cualquier ejemplo de 3-SAT se puede transformar en un ejemplo equivalente que cumpla esta restricción. Esto se hace con el siguiente procedimiento: Si una variable x no cumple las condiciones de la restricción, apareciendo k veces en las cláusulas, se substituye x por k nuevas variables, x1,...,xk, una por cada aparición. Se añaden las cláusulas: x1x2,x2x3,...,xk x1 Estas son equivalentes a: x1 x2,x2 x3,...,xk x1 con lo que todas las versiones xi tienen que tener el mismo valor de verdad. Tema 4: NP-completitud Es claramente NP ya que si se se pueden asignar de forma no determinista valores de verdad a las variables y después comprobar en tiempo polinómico si se veriﬁcan las condiciones especiﬁcadas: en cada cláusula hay un literal cierto y otro falso. Tema 4: NP-completitud Se añade una nueva variable z. Para cada clausula con menos de 3 literales, añadimos z. Si los tres literales son distintos pqr añadimos una variable s (signiﬁcado: pq s) y las cláusulas: s r z, pqs, ps z, qs z Tema 4: NP-completitud Problema del Isomorﬁsmo de Grafos Dados dos grafos no dirigidos G1 (V1,E1) y G2 (V2,E2), determinar si existe un isomorﬁsmo entre G1 y G2, esto es una aplicación biyectiva f : V1 V2, tal que (u,v) E1 (f (u),f (v)) E2. Tema 4: NP-completitud Acoplamiento de Tripletas (ACTRI) Datos: Un subconjunto M W X Y de compatibilidades Pregunta: ¿Contiene M un subconjunto M M con q elementos, tal que para cada (w1,x1,y1),(w2,x2,y2) M, si (w1,x1,y1) 6 (w2,x2,y2), entonces w1 6 w2, x1 6 x2, y1 6 y2?. Tema 4: NP-completitud Acoplamiento de Tripletas (ACTRI) Datos: Un subconjunto M W X Y de compatibilidades Pregunta: ¿Contiene M un subconjunto M M con q elementos, tal que para cada (w1,x1,y1),(w2,x2,y2) M, si (w1,x1,y1) 6 (w2,x2,y2), entonces w1 6 w2, x1 6 x2, y1 6 y2?. Tema 4: NP-completitud Tema 4: NP-completitud Para demostrar que es completo para NP, para a reducir 3-SAT a ACTRI. Vamos a suponer un ejemplo de 3-SAT con los siguientes datos: U {u1,u2,...,un}, Vamos a construir un ejemplo de ACTRI con la misma solución. Construiremos los conjuntos W,X,Y y el subconjunto de tripletas M W X Y. Para cada variable ui vamos a introducir en W los elementos ui[j],ui[j], elementos bi[j],j 1,...,m. En M se introducen las tripletas: T t T f C {c1,c2,...,cm} j 1,...,m, en X los elementos ai[j],j 1,...,m y en Y los i {(ui[j],ai[j],bi[j]) : 1 j m} y i {(ui[j],ai[j 1],bi[j]) : 1 j m}{(ui[m],ai[1],bi[m])}. Tema 4: NP-completitud Ejemplo: U {u1,u2,u3,u4}, C {u1 u3u4,u1u2u4} {(u1[1],a1[1],b1[1]),(u1[2],a1[2],b1[2]),(u1[1],a1[2],b1[1]),(u1[2],a1[1],b1[2]), (u2[1],a2[1],b2[1]),(u2[2],a2[2],b2[2]),(u2[1],a2[2],b2[1]),(u2[2],a2[1],b2[2]), (u3[1],a3[1],b3[1]),(u3[2],a3[2],b3[2]),(u3[1],a3[2],b3[1]),(u3[2],a3[1],b3[2]), (u4[1],a4[1],b4[1]),(u4[2],a4[2],b4[2]),(u4[1],a4[2],b4[1]),(u4[2],a4[1],b4[2]), } Tema 4: NP-completitud Gráﬁca de tripletas: ui[1] ui[4] ui[2] ui[1] bi[2] ai[2] bi[1] ai[3] ai[1] ai[4] bi[4] b ui[4] bi valores ai, Los en aparecen no otras El tripletas. efecto es que en M deberán estas los elementos todos ui[1],ui[2],ui[3],ui[4] o todos los elementos ui[1],ui[2],ui[3],ui[4]. bi[3] ui[3] ui[2] ui[3] Tema 4: NP-completitud Gráﬁca de tripletas: ui[1] ui[4] ui[1] ui[2] bi[2] ai[2] bi[1] ai[3] ai[1] ai[4] bi[4] b ui[4] bi valores ai, Los en aparecen no otras El tripletas. efecto es que en M deberán estas los elementos todos ui[1],ui[2],ui[3],ui[4] o todos los elementos ui[1],ui[2],ui[3],ui[4]. bi[3] ui[3] ui[2] ui[3] Tema 4: NP-completitud Gráﬁca de tripletas: ui[1] ui[4] ui[1] ui[2] bi[2] ai[2] bi[1] ai[3] ai[1] ai[4] bi[4] b ui[4] bi valores ai, Los en aparecen no otras El tripletas. efecto es que en M deberán estas los elementos todos ui[1],ui[2],ui[3],ui[4] o todos los elementos ui[1],ui[2],ui[3],ui[4]. bi[3] ui[3] ui[2] ui[3] Tema 4: NP-completitud Por cada cláusula cj C: Añadir un elemento s[j] a X Añadir un elemento t[j] a Y Añadir a M las tripletas {(ui[j],s[j],t[j]) : ui está en cj} {(ui[j],s[j],t[j]) : ui está en cj} La idea es que en cada acoplamiento M debe de contener alguna de estas tripletas. Si, de las tripletas anteriores, quedaban libres (no elegidos) los elementos ui[1],ui[2],ui[3],ui[4] corresponde al caso en el que ui es cierto. Si quedaban libres ui[1],ui[2],ui[3],ui[4], corresponde al caso en el que ui es falso. En consecuencia, estas tripletas garantizan que todas las clásulas se satisfacen. Tema 4: NP-completitud Se añden los siguientes elementos: g[k], 1 k m(n1) al conjunto X h[k], 1 k m(n1) al conjunto Y Al conjunto M las tripletas: (ui[j],g[k],h[k]),(ui[j],g[k],h[k]), 1 k m(n1),1 i n,1 j m La idea es la siguiente: Nos han quedado libres en W después de elegir entre las primeras tripletas: m.n elementos. Después de la segundas tripletas, como hemos elegido uno por cláusula, nos quedan m.nm m(n1). Ahora añadimos este número de elementos a X y a Y y le permitimos que sean compatibles con todos los de X, para tener libertad para elegir los elementos sobrantes en tripletas como queramos. El número de tripletas de M es: 2mn3m2m2n(n1) Tema 4: NP-completitud U {u1,u2,u3,u4}, C {u1 u3u4,u1u2u4} W {u1[1],u1[2],u1[1],u1[2],u2[1],u2[2],u2[1],u2[2], u3[1],u3[2],u3[1],u3[2],u4[1],u4[2],u4[1],u4[2]} X {a1[1],a1[2],a2[1],a2[2],a3[1],a3[2],a4[1],a4[2],s[1],s[2], g[1],g[2],g[3],g[4],g[5],g[6]} Y {b1[1],b1[2],b2[1],b2[2],b3[1],b3[2],b4[1],b4[2],t[1],t[2], h[1],h[2],h[3],h[4],h[5],h[6]} Tema 4: NP-completitud U {u1,u2,u3,u4}, C {u1 u3u4,u1u2u4} M {(u1[1],a1[1],b1[1]),(u1[2],a1[2],b1[2]),(u1[1],a1[2],b1[1]),(u1[2],a1[1],b1[2]), (u2[1],a2[1],b2[1]),(u2[2],a2[2],b2[2]),(u2[1],a2[2],b2[1]),(u2[2],a2[1],b2[2]), (u3[1],a3[1],b3[1]),(u3[2],a3[2],b3[2]),(u3[1],a3[2],b3[1]),(u3[2],a3[1],b3[2]), (u4[1],a4[1],b4[1]),(u4[2],a4[2],b4[2]),(u4[1],a4[2],b4[1]),(u4[2],a4[1],b4[2]), (u1[1],s[1],t[1]),(u3[1],s[1],t[1]),(u4[1],s[1],t[1]), (u1[2],s[2],t[2]),(u2[2],s[2],t[2]),(u4[2],s[2],t[2]), (ui[j],g[k],h[k]),(ui[j],g[k],h[k])(i 1,...,4,j 1,2,k 1,...,6)} Tema 4: NP-completitud Si tenemos una asignación de valores de verdad t(ui) {V,F} que satisface todas las cláusulas, elegimos el subconjunto de tripletas M de la siguiente forma: Si ui es cierto elegimos las tripletas: {(ui[j],ai[j],bi[j]) : 1 j m} Si ui es falso: {(ui[j],ai[j 1],bi[j]) : 1 j m}{(ui[m],ai[1],bi[m])}. Para cada cláusula j elegimos de entre las tripletas: {(ui[j],s[j],t[j]) : ui está en cj} {(ui[j],s[j],t[j]) : ui está en cj} elegimos aquella que corresponde a la variable ui que hacer cierta la cláusula. Nos quedan por elegir exactamente n(m1) elementos de cada conjunto, que se eligen de las tripletas (ui[j],g[k],h[k]),(ui[j],g[k],h[k]). Aquí no hay problema, ya que todos los elementos son compatibles entre sí. Tema 4: NP-completitud Supongamos el problema de ACTRI construido a partir de 3-SAT y supongamos que tenemos un subconjunto M de tripletas solución. tripletas en una solución: o se eligen las {(ui[j],ai[j],bi[j]) : 1 j m} o se eligen las {(ui[j],ai[j 1],bi[j]) : 1 j m}{(ui[m],ai[1],bi[m])}. 3 Para cada cláusula alguna de las 3 tripletas: {(ui[j],s[j],t[j]) : ui está en cj}{(ui[j],s[j],t[j]) : ui está en cj} debe de haberse elegido en M. 4 Si hemos elegido (ui[j],s[j],t[j]) con ui en cj, entonces, ui[j] no estaba en las tripletas elegidas consideradas en el paso 1. Por lo tanto, hemos hecho ui verdadero y la cláusula se satisface. 5 Si hemos elegido (ui[j],s[j],t[j]) con ui en cj, entonces, ui[j] no estaba en las tripletas elegidas consideradas en el paso 1. Por lo tanto, hemos hecho ui falso y la cláusula se satisface. Tema 4: NP-completitud Cubr. por conj. de tamaño tres (3-SET) Datos: Un conjunto ﬁnito X con X 3q y un subconjunto C de subconjuntos de X de tres elementos. Pregunta: de C son disjuntos dos a dos (A,B C y A 6 B, entonces AB /0)? ¿Existe C C tal que X SAC A y los elementos Es un problema de NP. Para demostrar que es completo para NP, existe una trasformación muy sencilla: ACTRI 3-SET. Supongamos un ejemplo de ACTRI dado por W,Y,Z y el subconjunto de tripletas M, construimos el ejemplo de 3-SET donde X W Y Z y C {{w,y,z} : (w,y,z) M} Tema 4: NP-completitud Clique: Dado un grafo G (V,E), un clique es un subconjunto maximal totalmente conectado. Es decir, un subconjunto Vt V tal que v1,v2 Vt, incluido en otro conjunto que cumpla esta propiedad. El problema del Clique Máximo (Clique): Dado un grafo G (V,E) y un número natural J V, determinar si existe un clique de tamaño mayor o igual que J. (v1,v2) E, y que no está estrictamente Tema 4: NP-completitud En el siguiente grafo, tenemos un clique de tamaño 4 (en rojo): Tema 4: NP-completitud Cubrimiento por Vértices (CV) Dado un grafo G (V,E) y un subconjunto Vc V, se dice que Vc es un cubrimiento por vértices de G, si y solo si toda arista del grafo tiene un extremo en Vc: (u,v) E, (u Vc v Vc) Problema: Dado un grafo G (V,E) y un número natural K V, determinar si existe un cubrimiento por vértices de tamaño menor o igual que K. Tema 4: NP-completitud En el siguiente grafo, tenemos un cubrimiento por vértices de tamaño 3 (en rojo): Tema 4: NP-completitud Conjunto Independiente (CI) Dado un grafo G (V,E) y un subconjunto Vi V, se dice que Vi es un conjunto independiente de G, si y solo si no hay ninguna arista que una vértices de Vi: u,v Vi, (u,v) 6 E Problema: Dado un grafo G (V,E) y un número natural J V, determinar si existe un conjunto independiente de tamaño mayor o igual que J. Tema 4: NP-completitud En el siguiente grafo, tenemos un conjunto independiente de tamaño 4 (en rojo): Tema 4: NP-completitud Si G (V,E) es un grafo y V V, entonces las siguientes condiciones son equivalentes: a) V es un cubrimiento por vértices de G b) V V es un conjunto independiente de G c) V V es un subgrafo totalmente conectado del grafo complementario G (V,E). Donde E V V E. Tema 4: NP-completitud Tema 4: NP-completitud Los tres problemas (Clique, Cubrimiento por Vértices y Conjunto Independiente) son equivalente y si uno es NP-completo los otros también lo son. Si n es es número de nodos de G, entonces: G tiene un conjunto independiente de tamaño mayor o igual que nK G tiene un clique de tamaño mayor o igual que nK Tema 4: NP-completitud Cubr. por Vértices (CV) es NP-completo Está claro que es NP: se elige de forma no determinista un subconjunto de vértices y se comprueba en tiempo polinómico si es un cubrimiento. Tema 4: NP-completitud Para demostrar que es completo reduciremos 3-SAT: 3-SAT CV. Sea una ejemplo de 3-SAT con variables U y cláusulas C. Se crea un ejemplo de CV, dado por un grafo G (V,E). Tema 4: NP-completitud Para cada variables ui U se añaden dos vértices ui,ui y un arco que los una. Para cada cláusula cj C, se añaden tres vértices a1[j],a2[j],a3[j] y tres aristas que los unan (se forma un triángulo). Para cada clásula cj C si en el literal número k de esta clásula aparece la variable ui, se añade una arista de uk[j] al vértice ui si la variable aparece positiva y al vértice ui si la variable aparece negada. Se pone un límite K n2m. Tema 4: NP-completitud Ejemplo de 3-SAT: U {u1,u2,u3,u4}, C {u1 u3u4,u1u2u4}. Tema 4: NP-completitud Ejemplo de 3-SAT: U {u1,u2,u3,u4}, C {u1 u3u4,u1u2u4}. Tema 4: NP-completitud Ejemplo de 3-SAT: U {u1,u2,u3,u4}, C {u1 u3u4,u1u2u4}. a1[2] a2[2] a1[1] a1[3] a2[1] a2[3] Tema 4: NP-completitud Ejemplo de 3-SAT: U {u1,u2,u3,u4}, C {u1 u3u4,u1u2u4}. a1[2] a2[2] a1[1] a1[3] a2[1] a2[3] Tema 4: NP-completitud Ejemplo de 3-SAT: U {u1,u2,u3,u4}, C {u1 u3u4,u1u2u4}. a1[2] a2[2] a1[1] a1[3] a2[1] a2[3] Tema 4: NP-completitud Ejemplo de 3-SAT: U {u1,u2,u3,u4}, C {u1 u3u4,u1u2u4}. a1[2] a2[2] a1[1] a1[3] a2[1] a2[3] Tema 4: NP-completitud Equivalencia CV 3-SAT Ejemplo de 3-SAT: U {u1,u2,u3,u4}, C {u1 u3u4,u1u2u4}. a1[2] a2[2] a1[1] a1[3] a2[1] a2[3] Tema 4: NP-completitud Cubrimiento: Vértices rojos Debe de haber, al menos, un vértice de cada pareja, ui,ui Para cada cláusula Cj deben de existir, al menos, dos vértice de cada conjunto: {a1[j],a2[j],a3[j]}. Como el cubrimiento tiene, a lo más, n2m vértices, entonces habrá exactamente un vértice por cada pareja ui,ui y dos por cada conjunto {a1[j],a2[j],a3[j]}. Tema 4: NP-completitud Las clásulas se pueden satisfacer haciendo para cada variable ui: ui cierto si ui Vc ui falso si ui 6 Vc Cada cláusula Cj tiene tres vértices, y cada vértice está conectado con un vértice de variable. De estos tres arcos, hay dos que tienen extremos en los dos vértices de {a1[j],a2[j],a3[j]} que están en Vc El otro arco, tendrá que tener su extremo del cubrimiento en los vértices correspondientes a las variables: ui o ui. El valor de verdad asignado a dicha variable hace que esa cláusula se satisfaga. Tema 4: NP-completitud Sea una asignación de valores de verdad que haga consistentes las cláusulas, entonces un cubrimiento por vértices del tamaño deseado se consigue de la siguiente forma: Vc {ui : uies verdadero}{ui : uies falso} Sj({a1[j],a2[j],a3[j]}{ai[j]}) donde ai[j] corresponde al literal que hace verdadera la cláusula Cj. (cid:0) (cid:1) Tema 4: NP-completitud El Problema del Circuito Hamiltoniano (CH) Es inmediato que es NP. El algoritmo no-determinista polinomico solo tiene que elegir n nodos (número de nodos en el grafo) y después comprobar que hay un arco desde cada nodo al siguiente y del último hasta el primero. Para demostrar que es completo, vamos a reducir CV a este problema. Sea G (V,E) y K V un problema de cubrimiento por vértices. Vamos a construir un grafo G (V ,E) de tal forma que la existencia de un circuito hamiltoniano para G sea equivalente a la existencia de un recubrimiento de tamaño K para G. Tema 4: NP-completitud Reducción: grafos base Para cada e (u,v) E se añade el siguiente grafo a G (con 12 vértices). (u,e,1) (v,e,1) (u,e,2) (v,e,2) (u,e,3) (v,e,3) (u,e,4) (v,e,4) (u,e,5) (v,e,5) (u,e,6) (v,e,6) Tema 4: NP-completitud Reducción: grafos base Para cada e (u,v) E se añade el siguiente grafo a G (con 12 vértices). (u,e,1) (v,e,1) (u,e,2) (v,e,2) (u,e,3) (u,e,4) (v,e,3) (v,e,4) (u,e,5) (v,e,5) (u,e,6) (v,e,6) Tema 4: NP-completitud Reducción: recorridos (u,e,1) (u,e,1) (u,e,6) (u,e,6) (v,e,1) (v,e,6) Tema 4: NP-completitud (v,e,1) (v,e,6) Reducción: conectando grafos básicos Para cada v V sea ev[1],...,ev[rv] una ordenación arbitraria de los ar- cos que contienen v. Para 1 i rv unimos el sub- grafo asociado a ev[i] y el subgrafo ev[i 1] mediante un arco que va de (v,ev[i],6) a (v,ev[i 1],1). (v,ev[i 1],1) Tema 4: NP-completitud ev[i] (v,ev[i],6) ev[i 1] Reducción: Nodos Adicionales Finalmente se añaden K vértices, a1,a2,...,aK, que se unen con los subgrafos de la siguiente forma: Para cada v V sea ev[1],...,ev[rv], la lista de las aristas que lo contienen en el orden que se consideraron anteriormente Se añade una arista de cada uno de los ai a (v,ev[1],1) (vértice extremo de la primera arista correspondiente a v) Se añade una arista de cada uno de los ai a (v,ev[rv],6) (vértice extremo de la última arista correspondiente a v) Tema 4: NP-completitud Reducción: Nodos Adicionales (v,ev[1],1) (v,ev[rv],6) Tema 4: NP-completitud K Tema 4: NP-completitud K Tema 4: NP-completitud K Nodo u: aristas e1,e3 Nodo v: aristas e1,e2 Nodo w: aristas e2,e3 Tema 4: NP-completitud K Nodo u: aristas e1,e3 Nodo v: aristas e1,e2 Nodo w: aristas e2,e3 Tema 4: NP-completitud K Nodo u: aristas e1,e3 Nodo v: aristas e1,e2 Nodo w: aristas e2,e3 Tema 4: NP-completitud K Nodo u: aristas e1,e3 Nodo v: aristas e1,e2 Nodo w: aristas e2,e3 Tema 4: NP-completitud Equivalencia de Soluciones: CV CH Sean K vértices que forman un cubrimiento por vértices: {v1,...,vK}. Un circuito hamiltoniano se puede construir de la siguiente forma comenzando en a1: Si estamos en ai, desde él recorremos todos los grafos asociados a las aristas de vi: para cada arista si tiene sólo a vi en el cubrimiento por vértices, se recorre el subgrafo de esa arista de forma completa; si la arista contiene los dos extremos en el cubrimiento, se recorre sólo la mitad de los vértices del subgrafo correspondientes a vi. Desde el último subgrafo volvemos a ai1, repitiendo el proceso, excepto para aK que volvemos a a1 y termina el circuito. Tema 4: NP-completitud Equivalencia de Soluciones: CH CV Desde cada ai al siguiente ai1 (y también desde aK a a1) recorremos los subgrafos. En cada uno de esos recorridos entramos y salimos en los subgrafos por un mismo vértice. Sea este vértice vi (vK si es el recorrido de aK a a1). El conjunto {v1,...,vK} es un cubrimiento por vértices, ya que cada arista tiene un subgrafo en el que, al menos, el circuito hamiltoniano entra una vez. El vértice por el que se entra (que ha de coincidir con el de salida) ha de estar en el cubrimiento por vértices. Tema 4: NP-completitud Datos: Un conjunto A y un tamaño para cada uno de sus elementos: s : A N y un número entero B Pregunta: Determinar si existe un A A tal que se veriﬁque: aA s(a) B Este es claramente un problema de NP: se eligen de forma no determinista los elementos de A y en tiempo polinómico se determina si la suma de los tamaños de los conjuntos es igual a B. Para demostrar que es completo para NP, vamos a reducir el cubrimiento por tripletas (ACTRI) a este problema. Tema 4: NP-completitud Reducción, ACTRI SUMA Sea W,X,Y con W X Y q y un subconjunto M X Y Z un ejemplo del problema ACTRI, vamos a construir una partición equivalente. Consideremos: W {w1,...,wq}, Y {y1,...,yq} M {m1,m2,...,mk} X {x1,...,xq} El conjunto A va a contener k elementos A {a1,...,ak}. Cada elemento ai A se corresponde con una tripleta mi M. Tema 4: NP-completitud Pregunta Si sumanos k unos, ¿cuantas cifras como máximo puede tener el número resultante? Tema 4: NP-completitud Pregunta Si sumanos k unos, ¿cuantas cifras como máximo puede tener el número resultante? 1 El resultado tiene a lo más tamaño p [log2(k)]1 (sumar uno a log2(k) sin decimales). Tema 4: NP-completitud Reducción ACTRI SUMA Para cada tripleta mi (wf (i),xg(i),yh(i)), se considera el elemento ai con un peso: s(ai) 2p(3qf (i)) 2p(2qg(i)) 2p(qh(i)) donde p [log2(k)]1. En binario podemos ver el número en grupos de p posiciones. Cada grupo corresponde a un elemento de W,X o Y: w1 w2 Cada tripleta mi (wf (i),xg(i),yh(i)) se corresponde con un número con un 1 a la derecha de las zonas de wf (i),xg(i),yh(i) y 0 en el resto. Tema 4: NP-completitud Reducción ACTRI SUMA Para cada tripleta mi (wf (i),xg(i),yh(i)), se considera el elemento ai con un peso: s(ai) 2p(3qf (i)) 2p(2qg(i)) 2p(qh(i)) donde p [log2(k)]1. En binario podemos ver el número en grupos de p posiciones. Cada grupo corresponde a un elemento de W,X o Y: w1 w2 Cada tripleta mi (wf (i),xg(i),yh(i)) se corresponde con un número con un 1 a la derecha de las zonas de wf (i),xg(i),yh(i) y 0 en el resto. Ejemplo: Tripleta: (w2,x1,yq) Tema 4: NP-completitud Reducción ACTRI SUMA Si p [log2(k)] 1, entonces sumando k o menos unos nunca obtenemos un número con un 1 más allá de la posición p Finalmente, B 3q1 de cada una de las zonas: j0 2p.j. Este número tiene un 1 a la derecha Tema 4: NP-completitud Supongamos el problema de tripletas con: W {w1,w2,w3},X {x1,x2,x3},Y {y1,y2,y3} y las tripletas (w2,x1,y3),(w2,x2,y2),(w3,x2,y1),(w3,x3,y2),(w1,x3,y2). Tema 4: NP-completitud Supongamos el problema de tripletas con: W {w1,w2,w3},X {x1,x2,x3},Y {y1,y2,y3} y las tripletas (w2,x1,y3),(w2,x2,y2),(w3,x2,y1),(w3,x3,y2),(w1,x3,y2). Construimos el siguiente problema de la SUMA: el número de tripletas es k 5, y p [log(k)]1 3. Hay un individuo para cada tripleta deﬁnido por su peso (se supone un orden w1,w2,w3,x1,x2,x3,y1,y2,y3): (w2,x1,y3) (w2,x2,y2) (w3,x2,y1) (w3,x3,y2) (w1,x3,y2) y B 001 001 001 001 001 001 001 001 001. Tema 4: NP-completitud Las tripletas 1, 3, 5: (w2,x1,y3),(w3,x2,y1),(w1,x3,y2) son una solución del problema original y los individuos correspondientes a estas tripletas suman B. (w2,x1,y3) (w3,x2,y1) (w1,x3,y2) Tema 4: NP-completitud Reducción ACTRI SUMA Como una consencuencia, para cada A {a1,...,ak}, tenemos que aA s(a) B si y solo si M {mi : ai A} es un recubrimiento por tripletas. Tema 4: NP-completitud Datos: Un conjunto C y un tamaño para cada uno de sus elementos: s : C N Pregunta: Determinar si existe un C C tal que se veriﬁque: aC s(a) aCC s(a) Este es claramente un problema de NP: se eligen de forma no determinista los elementos de C y en tiempo polinómico se determina si los tamaños totales de los conjuntos C y C C son iguales. Para demostrar que es NP-completo, vamos a reducir el probmea SUMA a este problema. Tema 4: NP-completitud Si tenemos un problema de suma con A, tamaños s y entero B, entonces creamos un problema de la partición en el que C A{b1,b2} (añadimos dos valores nuevos). Los tamaños en el problema de la PARTICIÓN de los elementos de A son los mismos que en el problema de la SUMA. Los tamaños de los nuevos elementos, b1 y b2, son: k s(b1) s(b2) 2B (cid:0) i1s(ai) (cid:1) Cada uno de estos pesos necesita, a lo más, (3pq) bits. Se pueden calcular zona a zona de forma consecutiva. Tema 4: NP-completitud El conjunto C es igual a {a1,...,ak,b1,b2}. xA s(x) k i s(ai)s(b1)s(b2) k i s(ai) k i s(ai)2B k i s(ai)2B Este conjunto se parte en dos mitades cuando cada una pesa: k i s(ai)B Tema 4: NP-completitud Supongamos C C, tal que aA s(a) aAA s(a) Entonces cada una de estas sumas es k i1s(ai)B. Uno de los conjuntos (supongamos que es A) debe de contener b1 y no b2. La suma de los pesos de los elementos de C distintos de b1 tiene que ser B. Por tanto, existe una solución positiva al problema de la SUMA. Tema 4: NP-completitud Si el problema de la suma tiene solución con A tal que aA B, entonces C {b1}A ya que la suma de los pesos de C es k ( i s(ai)B) Tema 4: NP-completitud Del libro de Garey-Johnson: Tema 4: NP-completitud Subproblema signiﬁca que eligiendo unos parámetros concretos de Π2, obtenemos Π1. Tema 4: NP-completitud Ejemplo: Problema de la Mochila Tenemos un conjunto ﬁnito de objetos U. Cada objeto, u, tiene un tamaño, s(u) N, y un valor v(u) N. Tenemos, además, dos números naturales: B (el tamaño máximo) y K (el valor mínimo). La pregunta es si existe un subconjunto de objetos U U, tal que uU s(u) B, uA v(u) K El problema de la partición es un caso particular de este problema, en el que s(u) v(u),u y B K (1/2)uU s(u). Tema 4: NP-completitud Ejemplo: Problema de la Mochila Tenemos un conjunto ﬁnito de objetos U. Cada objeto, u, tiene un tamaño, s(u) N, y un valor v(u) N. Tenemos, además, dos números naturales: B (el tamaño máximo) y K (el valor mínimo). La pregunta es si existe un subconjunto de objetos U U, tal que uU s(u) B, uA v(u) K El problema de la partición es un caso particular de este problema, en el que s(u) v(u),u y B K (1/2)uU s(u). REDUCCIÓN de PARTICIÓN(C,s) a MOCHILA(U,s,v,B,K): U C,s s,v s,B K (1/2)uC s(u) Tema 4: NP-completitud Datos: Un conjunto A de tareas, cada tarea, a A, tiene una longitud l(a) N. Tenemos, además, un número de procesadores m y un tiempo límite, D N. Pregunta: subconjuntos disjuntos, de manera que ¿Existe una partición de A: {A1,...,Am} en m max { aAi l(a) : 1 i m} D Si nos restringimos al caso m 2 y D 1/2aAl(a) obtenemos el problema de la partición. Tema 4: NP-completitud Cada elemento de un problema NP-completo Π se transforma en una estructura del problema que estamos considerando Π. Ejemplo: Reducción de SAT a 3-SAT Tema 4: NP-completitud Partición en Triángulos (PARTRI) Se parte de un grafo G (V,E) con un número de vértices V 3q. La pregunta es si existe un partición de V en q conjuntos disjuntos de tamaño 3: V1,...,Vq, de tal manera que si Vi {Vi[1],Vi[2],Vi[3]}, entonces los arcos (Vi[1],Vi[2]),(Vi[2],Vi[3]),(Vi[1],Vi[3]) E (los subconjuntos de vértices son triángulos). Este es un problema de NP, y se puede demostrar que es completo reduciento 3-SET (cubrimiento por conjuntos de tamaño 3). Tema 4: NP-completitud Reducción: 3-SET PARTRI Sea X con X 3q y C una familia de subconjuntos de tres elementos de X. Construimos el grafo G (V,E) con un número de vértices V 3q de la siguinete forma: todos los elementos de X serán vértices del grafo. ai[3] ai[9] Para cada conjunto ci {xi,yi,zi} C, añadimos 9 nuevos vértices a V y el siguiente subgrafo: ai[6] ai[1] ai[2] ai[7] ai[4] ai[5] Tema 4: NP-completitud ai[8] La equivalencia de las soluciones en ambos problemas se obtiene de las dos formas que existen de elegir los triángulos en cada uno de los subgrafos de G: ai[3] ai[9] ai[6] ai[1] ai[2] ai[7] ai[8] ai[4] ai[5] Tema 4: NP-completitud La equivalencia de las soluciones en ambos problemas se obtiene de las dos formas que existen de elegir los triángulos en cada uno de los subgrafos de G: ai[3] ai[9] ai[6] ai[1] ai[2] ai[7] ai[8] ai[4] ai[5] Tema 4: NP-completitud La equivalencia de las soluciones en ambos problemas se obtiene de las dos formas que existen de elegir los triángulos en cada uno de los subgrafos de G: ai[3] ai[9] ai[6] ai[1] ai[2] ai[7] ai[8] ai[4] ai[5] Tema 4: NP-completitud La equivalencia de las soluciones en ambos problemas se obtiene de las dos formas que existen de elegir los triángulos en cada uno de los subgrafos de G: ai[3] ai[9] ai[6] ai[1] ai[2] ai[7] ai[8] ai[4] ai[5] Tema 4: NP-completitud La equivalencia de las soluciones en ambos problemas se obtiene de las dos formas que existen de elegir los triángulos en cada uno de los subgrafos de G: ai[3] ai[9] ai[3] ai[6] ai[6] ai[1] ai[2] ai[7] ai[1] ai[8] ai[2] ai[7] ai[4] ai[5] ai[4] ai[5] Tema 4: NP-completitud ai[9] ai[ La equivalencia de las soluciones en ambos problemas se obtiene de las dos formas que existen de elegir los triángulos en cada uno de los subgrafos de G: ai[3] ai[9] ai[3] ai[6] ai[6] ai[1] ai[2] ai[7] ai[1] ai[8] ai[2] ai[7] ai[4] ai[5] ai[4] ai[5] Tema 4: NP-completitud ai[9] ai[ La equivalencia de las soluciones en ambos problemas se obtiene de las dos formas que existen de elegir los triángulos en cada uno de los subgrafos de G: ai[3] ai[9] ai[3] ai[6] ai[6] ai[1] ai[2] ai[7] ai[1] ai[8] ai[2] ai[7] ai[4] ai[5] ai[4] ai[5] Tema 4: NP-completitud ai[9] ai[ La equivalencia de las soluciones en ambos problemas se obtiene de las dos formas que existen de elegir los triángulos en cada uno de los subgrafos de G: ai[3] ai[9] ai[3] ai[6] ai[6] ai[1] ai[2] ai[7] ai[1] ai[8] ai[2] ai[7] ai[4] ai[5] ai[4] ai[5] Tema 4: NP-completitud ai[9] ai[ La equivalencia de las soluciones en ambos problemas se obtiene de las dos formas que existen de elegir los triángulos en cada uno de los subgrafos de G: ai[3] ai[9] ai[3] ai[6] ai[6] ai[1] ai[2] ai[7] ai[1] ai[8] ai[2] ai[7] ai[4] ai[5] ai[4] ai[5] La primera corresponde al caso en que {xi,yi,zi} está en el cubrimiento C, la segunda al caso en el que no está. Tema 4: NP-completitud ai[9] ai[ Corresponde al caso en el que, además de los elementos en que se transforman los elementos de Π, se añaden algunos elementos adicionales para forzar la equivalencia de las soluciones. Ejemplo: La reducción del cubrimiento por tripletas al problema de la partición: ACTRI PARTICION. Tema 4: NP-completitud Conjunto Mínimo de Tests (CMT) Datos: Un conjunto ﬁnito A (posibles diagnósticos), una familia C de subconjuntos de A (posibles tests) y un entero J N que representa el número admisible de tests. Pregunta: tal que para cada par de elementos distintos ai,aj A, existe un test c C que contiene uno y sólo uno de los elementos del par (un elemento, por ejemplo, ai está en c y el otro fuera)? ¿Existe una subfamilia de test C C con C J y Tema 4: NP-completitud Reducción: ACTRI a CMT Vamos a reducir ACTRI a este problema. Supongamos un ejemplo de ACTRI con M W X Y y W X Y q. Vamos a crear un ejemplo de este problema equivalente a él. Hacemos A W X Y {w0,x0,y0} C {{w,x,y} : (w,x,y) M}{W {w0},X {x0}} J q Tema 4: NP-completitud Distintas componentes del problema a reducir Π se transforman en distintas estructuras de Π que se conectan de alguna forma para forzar la equivalencia. Ejemplos: Tema 4: NP-completitud Reducibilidad Turing Un problema Π se reduce Turing a Π lo que se representa como Π T Π si y solo si Π se puede resolver en tiempo polinómico mediante un algoritmo que puede llamar a una función que resuelve Π contando cada llamada como un paso de cálculo. La reducibilidad Turing es un concepto más débil que el que hemos visto de reducibilidad espacio logarítmica: Si Π se reduce a Π, entonces se puede construir una reducibilidad Turing. Tema 4: NP-completitud Un problema Π es NP-difícil si y solo si existe un problema NP-completo Π que se puede reducir (Turing) a Π: Π T Π Teorema Si un problema NP-difícil se resuelve en tiempo polinómico entonces P NP. En este tema vamos a considerar problemas NP-difíciles que tienen una diﬁcultad similar a los NP-completos (existe reducción Turing entre ambos): Clase Co-NP: Complementarios de los problemas de NP Clase FNP: Problemas que buscan una solución, cuando saber si existe es NP. Tema 4: NP-completitud CoNP {L : L NP} Dado un conjunto φ de fórmulas en lógica proposicional determinar si son válidas (se satisfacen para todas las asignaciones de valores de verdad). Estos problemas no están en NP, lo que tienen es una Máquina polinómica no determinista en la que la respuesta es aﬁrmativa al problema si TODAS las opciones responden SI: Si la respuesta es positiva TODAS las opciones acaba en SI; si la respuesta es negativa AL MENOS UNA opción acaba en NO. Tema 4: NP-completitud L es NP Completo L es CoNP Completo Teorema Si un problema CoNP completo está en NP, entonces CoNP NP. Teorema Si P NP, entonces CoNP NP Tema 4: NP-completitud Tema 4: NP-completitud NP Un problema P(x) con entrada x A está en NP si y solo si existe una relación R en AA calculable en tiempo polinómico y un polinomio p(n) tal que P(x) Si y A con y p(x), R(x,y) Se dice que los problemas de NP son los problemas que se pueden veriﬁcar en tiempo polinómio (de forma eﬁciente). Al algoritmo que calcula R se le llama un veriﬁcador. A y se le llama un certiﬁcado. CoNP Un problema P(x) está en CoNP si y solo si existe una relación R en A A calculable en tiempo polinómico y un polinomio p(n) tal que P(x) Si y A con y p(x), R(x,y) Tema 4: NP-completitud Teorema Un número p 1 es primo si y solo si existe un número 1 r p tal que rp1 1 mod p y, además, r 6 1 mod p, para todos los divisores primos q de p1. p1 q Teorema: Teorema de Pratt Primos está en NP. Demostración Si p es primo, esto se puede certiﬁcar con la existencia de un número r tal que rp1 1 mod p y que además veriﬁcase r 6 1 mod p, para todos los divisores primos q de p1. La comprobación de que rp1 1 mod p se puede hacer en tiempo polinómico en función de la longitud de p, que es de orden l log(p): Para calcular 3 rp1, se calculan r2,r4,...,r2l . Esto tiene un orden de O(l3). r por sí solo no es un certiﬁcado: 20211 1 mod 21 y 21 no es primo p1 q Tema 4: NP-completitud Demostración El certiﬁcado tiene que adjuntar todos los divisores primos de p1. Es decir constará, en principio de r y una lista de divisores de p 1 : (q1,...,qk). El comprobar que la lista es completa se hace por divisiones sucesivas de p1 entre estos números y comprobando que de uno al ﬁnal. Nos queda una cuestión, ¿cómo sabemos que los números (q1,...,qk) son primos? Pues dando certiﬁcados para ellos. Excepto para 2 que no necesita certiﬁcado. El certiﬁcado sería una estructura recursiva: un certiﬁcado del número p sería r y una lista de divisores completa de p 1: (q1,...,qk), y certiﬁcados de primalidad para cada uno de ellos. Tema 4: NP-completitud Cert(67) ((67: 2 (2, 3, 11)), (3: 2 (2)), (11: 8 (2,5)), (5: 3 (2))) La longitud del certiﬁcado es de orden log2(p). La longitud de un número y su lista es de orden log(p). El número de listas es de orden log(p). Tema 4: NP-completitud Sea A un alfabeto y R una relación en AA, el problema de búsqueda P(x) asociado a esta relación consiste en dado un ejemplo x A, calcular P(x) (cid:26) tal que R(x,y) si {z : R(x,z) 1} 6 /0 si {z : R(x,z) 1} / Dado un grafo calcular un circuito hamiltoniano (si este existe) Tema 4: NP-completitud NP Un problema P(x) con entrada x A está en NP si y solo si existe una relación R en AA calculable en tiempo polinómico y un polinomio p(n) tal que P(x) Si y A con y p(x), R(x,y) Caracterización de FNP Un problema P(x) está en FNP si y solo si está asociado a una relación R decidible en tiempo polinómico y tal que si R(x,y) 1, entonces y p(x) para un polinomio p: P(x) (cid:26) tal que R(x,y) si {z : R(x,z) 1} 6 /0 si {z : R(x,z) 1} / Tema 4: NP-completitud FP FP: La clase de problemas de funciones de FNP tales que existe una máquina de Turing determinista que las calcula en tiempo polinómico. FNPT FNPT: La clase de los problema de FNP totales. Si para todo x existe un y con y p(x) tal que R(x,y) p pk1 Tema 4: NP-completitud Reducciones en FNP Un problema de funciones Π se reduce a un problema Π si y solo si, existen funciones R y S calculables en espacio logarítmico, tal que para toda cadena x y z ocurre lo siguiente: Si x es un ejemplo de Π entonces R(x) es un ejemplo de Π. Además si z es una solución correcta de R(x) entonces S(z) es una solución correcta de x. Un problema FNP-completo: FSAT Dado un conjunto de cláusulas, encontrar, si existe, una asignación de valores de verdad para la que todas las cláusulas sean verdaderas. Tema 4: NP-completitud Teorema NP P si y solo si FNP FP Demostración La demostración es muy sencilla: si FNP FP entonces es inmediato que NP P. Para la implicación inversa, supongamos que NP P, entonces la consis- tencia se puede sesolver en tiempo polinómico. Ahora, vamos a encontrar una asignación (si existe) en tiempo polinómico. Supongamos que tenemos un conjunto de cláusulas C. Elegimos una vari- able xn, y consideramos C1 que es C suponiendo xn verdadero (todas las cláusulas con xn se eliminan y en aquellas en las que aparezca xn se elimina este literal) y C2 que es C suponiendo xn falso. Tema 4: NP-completitud Tema 4: NP-completitud Primero se obtendría una cota superior R para el coste del circuito óptimo: el valor de distancia más grande, multiplicado por el número de ciudades. Después realizando una búsqueda binaria en el intervalo [0,R] mediante sucesivas llamadas al problema de decisión se calcula el valor del circuito óptimo: K. Tema 4: NP-completitud El Viajante de Comercio (Cont.) A continuación para cada par de ciudades se hace lo siguiente: si el coste de ir de una a otra es c, se llama al problema de decisión con presupuesto K e incrementando el coste de c a c 1. Si la respuesta es positiva, no es necesario usar este arco en el óptimo. Entonces se deja el coste a c 1 y se continúa. Al ﬁnal obtenemos todos los arcos de un circuito óptimo. Si en el primer caso se volviera al coste original, en vez de dejarlo en c 1, puede que no se obtenga el óptimo, ya que si hay dos circuitos óptimos ninguno de los arcos de ambos circuitos son necesarios. Tema 4: NP-completitud Son los de la clase FNPT Un problema está en esta clase si para todo x existe un y tal que R(x,y). Es decir, el problema de decisión no es difícil: siempre tiene una respuesta positiva. Eso no quiere decir que el problema sea fácil, ya que encontrar la solución no tiene por qué ser inmediato. Muchos de ellos no se conoce que estén en FP. Tema 4: NP-completitud Datos: Un grafo (V,E) y un peso w (que puede ser positivo o negativo para cada arco). Un estado es una aplicación s : V {1,1} (-1 El nodo i es feliz si ). s(i). (i,j)E s(j).w(i,j) Solución: Un estado s en el que todos los nodos sean felices. Tema 4: NP-completitud Φ(s) (i,j)E s(i)s(j)w(i,j) s(i). (i,j)E s(j).w(i,j) δ Sea el estado s igual que s, excepto que s(i) s(i). Entonces Φ(s) Φ(s)2δ. Como el valor de Φ no puede crecer indeﬁnidamente, este proceso tiene que terminar con una red feliz. Este algoritmo es pseudo polinómico, pero no polinómico. Tema 4: NP-completitud Φ Tema 4: NP-completitud Cambiamos un nodo infeliz: Φ Φ Tema 4: NP-completitud Tema 4: NP-completitud