Tema 5: Complejidad de Problemas de Optimización Aproximados Tema 5: Complejidad de Problemas de Optimización Aproximados Algoritmos δ-aproximados Análisis de problemas: cubrimiento por vértices, viajante de comercio, corte máximo, mochila, satisfacción máxima. Tema 5: Complejidad de Problemas de Optimización Aproximados G. Ausiello, P. Creszendi et al. (1999) Complexity and Approximation . Springer-Verlag, Berlin. A Compendium of NP Optimization Problems.  Tema 5: Complejidad de Problemas de Optimización Aproximados Problema de Optimización (minimización) Tenemos unos datos x. Estos datos tienen asociados un conjunto de soluciones factibles F(x) . s F(x) tenemos una función C(s) que evalúa el coste de esta solución. El problema es encontar un elemento s tal que C(s) min sF(x) C(s) Este problema se conoce cómo la versión constructiva del problema de optimización. Si sólo se trata de calcular C(s), tendremos la versión de evaluación. En general, son de diﬁcultad similar. Tema 5: Complejidad de Problemas de Optimización Aproximados Datos: un grafo G no dirigido. Soluciones factibles F(G): conjunto de los cubrimientos por vértices de G el conjunto de todos los subconjuntos de vértices A tales que toda arista tiene, al menos un extremo en A. Coste de una solución factible A: su número de vértices. Tema 5: Complejidad de Problemas de Optimización Aproximados Problemas de Optimización: Maximización Algunas veces, en vez de tener una función de coste, tenemos una función de albluebeneﬁcio B y tratamos de maximizarla. Cada ejemplo x, tiene asociado un conjunto de soluciones factibles F(x) . s F(x) tenemos una función B(s) que evalúa el beneﬁcio de esta solución. El problema es encontar un elemento s tal que B(s) maxsF(x)B(s) Tema 5: Complejidad de Problemas de Optimización Aproximados Estos problemas suelen ser equivalentes bajo reducción Turing a los problemas de decisión asociados (ver la reducción del problema del viajante de comercio en el tema del cálculo de funciones) cuando el problema de decisión es NP-completo. Vamos a ver problemas que son de similar diﬁcultad cuando se resuelven de forma exacta, son bastante diferentes cuando intentamos aproximarlos: unos no se pueden aproximar con ningún error; otros se pueden aproximar con algún error, pero no con errores muy pequeños; y otros se pueden aproximar con errores arbritrariamente pequeños. Tema 5: Complejidad de Problemas de Optimización Aproximados Razón de Eﬁcacia (maximización) Supongamos un problema de optimización que para una entrada x tiene un óptimo OPT(x) y ALG un algoritmo aproximado que para una entrada x obtiene una solución factible ALG(x) con un coste (beneﬁcio) de C(ALG(x)) (B(ALG(x))). Razón de eﬁcacia (maximización) δ OPT(x) B(ALG(x)) Tema 5: Complejidad de Problemas de Optimización Aproximados Razón de Eﬁcacia (minimización) Razón de eﬁcacia (minimización) δ C(ALG(x)) OPT(x) Tema 5: Complejidad de Problemas de Optimización Aproximados Umbral de Aproximación: mediante algoritmos polinómicos. Tema 5: Complejidad de Problemas de Optimización Aproximados Puede haber problemas en los que el umbral de aproximación sea inﬁnito (no hay algoritmos polinómicos con una razón de eﬁcacia δ). Tema 5: Complejidad de Problemas de Optimización Aproximados Buscamos el conjunto C con un número mínimo de nodos que sea un cubrimiento para G (V,E). Algoritmo Aproximado: C Mientras haya aristas en G Elegir un nodo de G con grado maximo Añadir el nodo a C Borrar de G ese nodo y todos sus enlaces Este no es un algoritmo δ-aproximado ningún valor de δ. El error puede llegar a ser de orden log(n). Tema 5: Complejidad de Problemas de Optimización Aproximados Tema 5: Complejidad de Problemas de Optimización Aproximados En los nodos de la derecha se sigue el si- guiente procedimiento: Para i desde 2 a 5 (uno menos que los nodos del centro) Se de- viden los nodos del centro de i en i y cada grupo de i se conecta con un nodo distinto de la derecha. Si un grupo no está completo no se considera. El siguiente debe de cubrir los nodos que no están cubiertos en este. Razón 13/6 2.Puede llegar a log(n). Tema 5: Complejidad de Problemas de Optimización Aproximados Algoritmo 2-Aproximado: C Mientras haya aristas en G Elegir una arista cualquiera de G Añadir sus dos extremos a C Borrar de G los dos nodos y todas sus aristas Este es un algoritmo 2-aproximado : todas las aristas tienen que tener un extremos en C. De esta forma, nunca elegimos más del doble de lo necesario. Es el mejor algoritmo que se conoce. No se puede aproximar con δ 1.1659. Tema 5: Complejidad de Problemas de Optimización Aproximados El problema del Corte Máximo: CM Datos: Un grafo no dirigido G (V,E). Problema: Partir V en dos conjuntos S y V S de tal manera que haya un número máximo de arcos entre S y V S. Tema 5: Complejidad de Problemas de Optimización Aproximados El problema del Corte Máximo: CM Datos: Un grafo no dirigido G (V,E). Problema: Partir V en dos conjuntos S y V S de tal manera que haya un número máximo de arcos entre S y V S. Tema 5: Complejidad de Problemas de Optimización Aproximados Suponemos que no existen arcos que unen un nodo con el mismo: estos arcos se pueden quitar ya que no están nunca en el corte. Si v es un nodo y A un subconjunto de nodos, consideremos arc(x,A): el número de arcos que unen v con A. Comenzamos con un conjunto S arbitrario Mientras S cambie Para cada vertice v del grafo Si el vertice esta en S Si arc(v,V S) arc(v,S) Eliminar v de S Si el vertice no esta en S Si arc(v,V S) arc(v,S) Añadir v a S Este algoritmo es polinómico, ya que da como máximo E pasos y cada paso es polinómico. Tema 5: Complejidad de Problemas de Optimización Aproximados Sea eij, Para cada nodo de V1 los arcos que van a nodos de V1 y V2 son menos que los que van a V3 y V4: x1 V1,arc(x1,V1) arc(x1,V2) arc(x1,V3) arc(x1,V4). Sumando la desigualdad anterior en todos los nodos de V1 obtenemos: 2e11 e12 e13 e14 y, por tanto, e12 e13 e14. 1 i j 4 el número de arcos entre Vi y Vj. Tema 5: Complejidad de Problemas de Optimización Aproximados e12 e13 e14, e12 e23 e24, e34 e23 e13, e34 e14 e24 e12 e34 e14 e23 e13 e24 También es obvio que e14 e23 e14 e23 e13 e24. Sumando, las dos últimas desigualdades obtenemos: e12 e34 e14 e23 2.(e14 e23 e13 e24) Lo que nos disce que nuestro algoritmo heurístico, al menos, obtiene la mitad de arcos del óptimo: La razón de aproximación es 2. Tema 5: Complejidad de Problemas de Optimización Aproximados Satisfacción Máxima: K-GMAXSAT DATOS: Tenemos n variables p1,...,pn y m fórmulas booleanas: {φ1,...,φm} tal que cada una de ellas tiene, a lo más, K variables. Problema: Queremos encontrar una asignación de valores de verdad que maximice el número de fórmulas ciertas. Tema 5: Complejidad de Problemas de Optimización Aproximados Para una asignación de valores de verdad al azar, calculamos la p robabilidad de que φi sea cierta: P(φi) P(Φ) P(φi) Xi Tema 5: Complejidad de Problemas de Optimización Aproximados P(Φ) 1/2(P(Φ[x1 verdadero]) P(Φ[x1 falso])) donde Φ[x1 verdadero], Φ[x1 falso] son los conjuntos de fórmulas que se obtienen a partir de las originales, substituyendo x1 por verdadero ( x1 falso) y x1 por falso ( x1 verdadero) respectivamente. Elegimos x1 verdadero si P(Φ[x1 verdadero]) P(Φ[x1 falso]) y x1 falso en caso contrario. Si x1 es verdadero repetimos lo mismo para el resto de las variables con Φ[x1 verdadero] y si lo hacemos falso trabajamos con Φ[x1 falso]. Tema 5: Complejidad de Problemas de Optimización Aproximados Num. Esp. 13/411/23/47/81/2163/8 r q, s q s, r s q, s, V p q, p, q s, r s q, s, p r q, p s r p s Num. Esp. 3/47/81/23/43/47/81/27/ 57/ q, F, q s, r s q, s, V r s Num. Esp. 1/21013/47/81/23/4 53/ Tema 5: Complejidad de Problemas de Optimización Aproximados Num. Esp. 13/411/23/47/81/2163/8 r q, s q s, r s q, s, V p q, p, q s, r s q, s, p r q, p s r p s Num. Esp. 3/47/81/23/43/47/81/27/ 57/ q, F, q s, r s q, s, V r s Num. Esp. 1/21013/47/81/23/4 53/ Tema 5: Complejidad de Problemas de Optimización Aproximados Cuando llegamos al ﬁnal (todas las variables tienen su valor de verdad), el numero esperado es el número exacto de fórmulas que se satisfacen, que es al menos el número original P(Φ). El óptimo del problema es menor o igual que el número de fórmulas φi para las que P(φi) 0, lo que denotamos como {φi : P(φi) 0}. Tema 5: Complejidad de Problemas de Optimización Aproximados La razón de aproximación es: OPT(x) APROX(x) {φi : P(φi) 0} APROX(x) : P(φi) 0} {φi P(φ1) ... P(φm) 1 mın{P(φi) : P(φi) 0} Este es un algoritmo δ-aproximado con δ 1 mın{P(φi) : P(φi)0}. Para fórmulas con k variables como máximo es δ-aproximado δ 2k. Para cláusulas con k literales distintos es δ 1 1(2k). Tema 5: Complejidad de Problemas de Optimización Aproximados Resultado Si P6 NP el problema del viajante de comercion no tiene un algoritmo con umbral δ polinómico. Supongamos que existe un algoritmo δ-aproximado polinómico para el problema del viajante de comercio ( δ ). Entonces, construiremos el siguiente algoritmo para el circuito hamiltoniano. Sea G (V,E) un grafo, entonces construimos un problema del viajante de comercio con los mismos nodos y en el que d(i,j) (cid:26) 1 V.δ si (i,j) E si (i,j) 6 E Tema 5: Complejidad de Problemas de Optimización Aproximados Si el algoritmo encuentra un circuito de coste V, existe un circuito hamiltoniano en G. Si el algoritmo aproximado no encuentra un circuito de coste V, devolverá un circuito de coste mayor de V.δ, entonces como Coste Circuito Optimo deducimos δ Optimo V Como consecuencia, Optimo V y el óptimo tiene un arco que no es de G y, por tanto, G no tiene un circuito hamiltoniano. Tema 5: Complejidad de Problemas de Optimización Aproximados Pesos: w1,...,wn Peso límite: W Problema: Encontrar S {1,...,n} tal que Valores: iS wi W y iS vi sea máximo. Podemos suponer que todo objeto tiene un peso wi W (todos los objetos caben en la mochila). Si un objeto no cabe, entonces se quita del problema y la solución es la misma. Tema 5: Complejidad de Problemas de Optimización Aproximados Pesos: w1,...,wn Peso límite: W Problema: Encontrar S {1,...,n} tal que Valores: iS wi W y iS vi sea máximo. Podemos suponer que todo objeto tiene un peso wi W (todos los objetos caben en la mochila). Si un objeto no cabe, entonces se quita del problema y la solución es la misma. Tema 5: Complejidad de Problemas de Optimización Aproximados Sea V max{v1,...,vn} Para i 0,1,...,n y 0 v nV calculamos: W(i,v): Mínimo peso que se puede conseguir eligiendo items entre los i primeros de valor v exactamente. Se calcula con: W(i 1,v) mın{W(i,v),W(i,v vi1) wi1} Tema 5: Complejidad de Problemas de Optimización Aproximados Para i 0,1,...,n y 0 v nV calculamos: W(i,v): Mínimo peso que se puede conseguir eligiendo items entre los i primeros de valor v exactamente. Se calcula con: W(i 1,v) mın{W(i,v),W(i,v vi1) wi1} Complejidad O(n2V). Es Pseudo-polinómico (exponencial en función de la longitud de V). Cuando se ha calculado W(n,v) es fácil calcular el óptimo: Comparamos, desde i nV hasta i 0 los valores W(n,i) con el límite W. El primer i para el que W(n,i) W es el óptimo del problema. Tema 5: Complejidad de Problemas de Optimización Aproximados Dado un ejemplo I (w1,...,wn,W,v1,...,vn) consideramos I (wi,...,wn,W,v 1,...,v n) donde v (Los b bits menos signiﬁcativos se reemplazan por 0). Entonces aplicamos el algoritmo pseudo-polinómico, pero quitando los 0s a la derecha de los números y añadiéndolos al resultado. Este tendrá una complejidad en este caso de O i 2b (cid:2) (cid:3) (cid:16) (cid:17) Tema 5: Complejidad de Problemas de Optimización Aproximados Se obtiene un algoritmo δ-aproximado, haciendo b Sea S el conjunto óptimo del problema original y S el que obtenemos en el algoritmo aproximado. Vamos a llamar a V(S) V(S) aproximado. Supondremos que V(S) V (como todos los objetos caben, siempre podemos considerar la solución que mete el objeto de mayor valor). Tenemos que: V(S) log((δ1).V h ) i iS vi el valor conseguido con el algoritmo óptimo y iS vi el valor conseguido con el algoritmo iS vi V(S) iS v iS vi i iS vi) n.2b V(S) n.2b iS(vi 2b) ( P iS v i Tema 5: Complejidad de Problemas de Optimización Aproximados V(S) V(S) V(S) n.2b Por tanto, la diferencia entre el óptimo y lo que calculamos es menor o igual a n.2b. Si b aproximado es, al menos, V (esto ocurre si todos los items caben en la mochila) tenemos que V(S) V(S)n2b V(S) 1 V.(δ1) δ Es decir es un algoritmo δ-aproximado. La complejidad es O (cid:17) convierte en O(n3/(δ 1)). log((δ1).V ) i V(S)n (δ1)V(S V(S) V(S)n (δ1)V V(S) ) V(S) log((δ1).V , que para b ) i (cid:16) Tema 5: Complejidad de Problemas de Optimización Aproximados Un problema de optimización Π tiene un esquema de aproximación polinómico si existe un algoritmo que para cada δ 1 y cada ejemplo x de Π, devuelve una aproximación de grado δ del óptimo de x, en tiempo polinómico en función de x (el polinomio puede depender de δ). Si la dependencia de δ se puede expresar como un polinomio en (1/(δ 1)), se dice que es un esquema de aproximación polinómico total . Tema 5: Complejidad de Problemas de Optimización Aproximados Teorema Si existe un algoritmo δ0-aproximado polinómico con δ0 para el máximo conjunto independiente, entonces existe un es- quema de aproximación polinómico. Tema 5: Complejidad de Problemas de Optimización Aproximados Deﬁnición NPO Un problema de optimización está en NPO si y solo si se cumplen las siguientes condiciones: problema x, y para cada solución factible y, tenemos que y q(x), y además para cada y q(x) es decidible en tiempo polinómico si es una solución factible del problema. Ejemplo: El cubrimiento mínimo por vértices. Tema 5: Complejidad de Problemas de Optimización Aproximados Ejemplo: La distancia mínima en grafos. Tema 5: Complejidad de Problemas de Optimización Aproximados Optimización Decisión Dado un problema de optimización (minimización o maximización), siempre podemos asociarle un problema de decisión: por ejemplo para un problema de minización, se da una cota K y se pregunta si existe una solución factible de costo menor o igual a K. Teorema Si P 6 NP entonces PO 6 NPO. Tema 5: Complejidad de Problemas de Optimización Aproximados Deﬁnición: Clase APX La clase APX es la clase de todos los problemas tales que admiten un algoritmo δ-aproximado polinómico para δ . Ejemplo: Problemas en APX Ejemplo: Problemas que no están en APX Teorema Si N 6 NP, entonces APX 6 NPO Tema 5: Complejidad de Problemas de Optimización Aproximados Deﬁnición: Clase APX La clase APX es la clase de todos los problemas tales que admiten un algoritmo δ-aproximado polinómico para δ . Ejemplo: Problemas en APX Ejemplo: Problemas que no están en APX Teorema Si N 6 NP, entonces APX 6 NPO Tema 5: Complejidad de Problemas de Optimización Aproximados Deﬁnición: Clase APX La clase APX es la clase de todos los problemas tales que admiten un algoritmo δ-aproximado polinómico para δ . Ejemplo: Problemas en APX Ejemplo: Problemas que no están en APX Teorema Si N 6 NP, entonces APX 6 NPO Tema 5: Complejidad de Problemas de Optimización Aproximados Deﬁnición: Clase APX La clase APX es la clase de todos los problemas tales que admiten un algoritmo δ-aproximado polinómico para δ . Ejemplo: Problemas en APX Ejemplo: Problemas que no están en APX Teorema Si N 6 NP, entonces APX 6 NPO Tema 5: Complejidad de Problemas de Optimización Aproximados Ejemplo: Un problema de PTAS Ejemplo: Problemas de APX que no está en PTAS (si P6 NP) El corte máximo o el cubrimiento mínimo. Tema 5: Complejidad de Problemas de Optimización Aproximados Deﬁnición: Problemas con un esquema de aproximación polinómico total (FPTAS) Para cada ejemplo x del problema Π, y todo número racional δ 1, el algoritmo devuelve para la entrada (x,δ) una solución δ-aproximada que es polinómico en x y (1/(δ 1)). Tema 5: Complejidad de Problemas de Optimización Aproximados Deﬁnición: Problemas acotados polinómicamente c(x,y) p(x) donde c(x,y) es el coste de la solución y. Tema 5: Complejidad de Problemas de Optimización Aproximados Corolario Si P 6 NP entonces PTAS 6 FPTAS El máximo conjunto independiente para grafos planares estaría en PTAS FPTAS. Tema 5: Complejidad de Problemas de Optimización Aproximados En el problema del corte máximo la diﬁcultad está en su estructural combinatoria: no hay números, sólo un grafo con sus vértices y arcos. El problema de la mochila puede resolverse por programación dinámica en tiempo O(n2pmax) donde pmax es el entero de tamaño máximo que aparece en el problema. Eso no implica que el problema sea polinómico, pero su complejidad se debe al tamaño de los números que aparecen. Los problemas que tienen un algoritmo tal que para cada ejemplo del problema x encuentra la respuesta correcta en un tiempo que depende polinómicamente de x y del entero mayor que aparezca en la especiﬁcación de x se dice que son Pseudo-Polinómicos. Tema 5: Complejidad de Problemas de Optimización Aproximados Teorema Si Π es un problema que está en FPTAS , y si existe un po- linomio p tal que para cada ejemplo x, el coste óptimo del problema c(x) veriﬁca: c(x) p(x,max(x)) donde max(x) es el entero mayor que aparece en x, entonces el problema es pseudo-polinómico . δ p(x,max (x)) 2 p(x,max (x)) Tema 5: Complejidad de Problemas de Optimización Aproximados Tema 5: Complejidad de Problemas de Optimización Aproximados Existe un concepto de reducción (L-reducción para problemas NPO). Tema 5: Complejidad de Problemas de Optimización Aproximados Ejemplo: Problemas NPO-completos Máxima, mínima satisfacción ponderada, máxima y mínima pro- gramación lineal {0,1} y el problema del viajante de comercio. Ejemplo: Problemas APX-completos Tema 5: Complejidad de Problemas de Optimización Aproximados