Seminario 1. Ejemplos de resolución de problemas con metaheurísticas: problemas clásicos y reales Introducción: Optimización 1. Introducción: Optimización ¿Optimizar? - Mejorar - Buscar la mejor manera de realizar una actividad Contexto científico: La optimización es el proceso de tratar de encontrar la mejor solución posible para un determinado problema. Nivel Empresarial: Reducir los costes. Mejorar la Experiencia del cliente. 1. Introducción: Optimización Problema de optimización: Diferentes soluciones, un criterio para discriminar entre ellas y el Encontrar el valor de unas variables de decisión (sujeto a restricciones) para los que una determinada función objetivo alcanza su valor máximo o mínimo 1. Introducción: Optimización Problema de optimización (minimización): Dado un dominio X y una función objetivo f(x): x X R El objetivo es encontrar x que verifique x X: f(x) f(x), x X Optimización combinatoria Variable discreta Un Problema de Optimización Combinatoria consiste en encontrar un objeto entre un conjunto finito (o al menos contable) de posibilidades Max{ g(x) } Min{ f(x) } con f(x) -g(x) 1. Introducción: Optimización Tipos de problemas de optimización (representación de una solución): Permutaciones (Problemas de ordenación) Binarios (Problemas de pertenencia) Enteros (Problemas de cardinalidad, asignación, selección) De optimización numérica (Optimización de funciones no lineales) 1. Introducción: Optimización Problemas de optimización fáciles de resolver: Lineales: función objetivo y restricciones lineales (método Simplex) Problemas de optimización difíciles de resolver (NP- duros): No se puede garantizar el encontrar la mejor solución posible en Mayoría de los problemas con aplicación práctica, científica o Desarrollo de procedimientos eficientes para encontrar buenas Problemas de explosión combinatorios. Pocos modelos teóricos Viajante Mochila Asignación Cuadrática Asignación Generalizada Problema de Máxima Diversidad Problemas de Mínima Dispersión Enrutamiento de vehículos Empaquetado en Cinta Problema del Viajante de Comercio: Travelling Salesman Problema: Encontrar la ruta más rápida entre N ciudades. Por cada ciudad se pasa una única vez. Se debe de volver a la ciudad origen. Definición Problema del Viajante de comercio, TSP: ¿Para qué sirve? Muchas Aplicaciones Diseño chips: Rutas más cortas. Rutas aéreas: Entre aeropuestos. Reparto almacén: Optimizar entregas. Cableado (eléctrico): Recorrido mínimo. Ciudades (N)  TSP.ipynb ¡Necesitamos buenos algoritmos y eficientes! Algoritmos que proporcionen una buena solución en un tiempo razonable Problema de la mochila, Knapsack Problem: Problema Quadratic knapsack problem (KQP): Hay beneficio combinado de objetos Problema Quadratic knapsack problem (KQP): Problema del enrutamiento de vehículos, VRP: Obtener el conjunto de rutas más cortas posibles utilizando un conjunto de vehículos (con capacidad limitada) lo más pequeño posible tal que, partiendo de un almacén y regresando sucesivamente a él, abastecen a una (con demanda diferente) distribuidos geográficamente Problema de la asignación cuadrática, QAP: QAP S Π N( i j f ijdS(i)S( j)) Problema de la máxima diversidad, MDP: Problema de la dispersión diferencial, MDD: Utilidades de este problema: Diseño de Redes: minimizar la diferencia de grados entre nodos puede ayudar a equilibrar la carga y mejorar el rendimiento. Redes Sociales: Al reducir la diferencia de grados entre los Gestión de la red eléctrica: Optimizar la ubicación y Problema del empaquetado en cinta, SPP: Problema del cliqué máximo: Encontrar la mayor Problema del coloreado de grafos: Encontrar la mínima Problema del árbol de Steiner: Encontrar un árbol de coste Problemas de asignación: Dada una tabla de tareas y personas que pueden realizarlas (coste distinto), encontrar la asignación de coste mínimo El uso de metaheurísticas se pueden aplicar a técnicas de aprendizaje automático y viceversa. Fuente: A. Telikani, A. Tahmassebi, W. Banzhaf, y A. H. Gandomi, Evolutionary Machine Learning: A Survey, ACM Computing Surveys}, vol. 54, 8, 2022, doi: 10.1145/3467477 Ejemplo: Feature Selection Ejemplo: Feature Selection Ejemplo: Feature Selection Ponderar características en un modelo de Machine Learning que use distancias (KNN). En vez de: Social Network Influence Maximization Problem, Social Network Influence Maximization Problem, Maximizar nodos influídos. Una conexión no implica influencia, cierta Se evalúa simulando varias veces. Márketing digital. Modelos epidémicos Diseño Aerodinámico Planificación de Rutas para Transporte de Mercancías Canalización automática Juegos Equilibrado de Líneas de Montaje en Nissan y otros Identificación Forense de Personas Desaparecidas La disminución de la resistencia al avance es clave Se calcula resolviendo unas ecuaciones que simulan el comportamiento de un objeto sólido (el avión) en interacción con un fluido (el aire), según la Dinámica Computacional de Fluidos Después se usan métodos de optimización para obtener la Los diseños prometedores mediante la simulación computacional son validados en el túnel de viento En casos reales, cada ejecución puede requerir meses de Por ello, se han empleado los algoritmos evolutivos para esta tarea, que son capaces de proporcionar diseños de buena calidad en un tiempo mucho más reducido Además, como optimizadores multiobjetivo, pueden optimizar varios criterios a la vez (velocidad, estabilidad o gasto de combustible, por ejemplo) Hoy en día es difícil encontrar empresas que gestionen las El problema típico es diseñar las rutas más adecuadas de transporte/recogida de productos entre un almacén central y unos destinos dispersos geográficamente Su resolución de forma adecuada puede suponer ahorros muy Esta tarea se lleva a cabo empleando una flota de vehículos Un sistema de planificación de vehículos debe proporcionar un Las mercancías deben ser entregadas cuándo y donde se requieran, con el mínimo coste posible y verificando todas las restricciones legales y políticas de la empresa Los algoritmos de hormigas (AntRoute) son una herramienta AntRoute planifica diariamente las rutas de reparto desde el almacén central de Migros, una gran cadena suiza con 600 supermercados, localizado en Suhr (AG), a toda Suiza Migros dispone de una flota de entre 150 y 200 vehículos con tres tamaños: camiones (capacidad de 17 palés), trailers (35 palés) y unidades tractoras (33 palés) Esto provoca restricciones de acceso a los almacenes de los supermercados, restricciones de uso de ciertas carreteras, Los repartos tienen de realizarse a horas específicas, todos ellos en un solo día (productos perecederos) y el último tiene que hacerse lo más lejos posible del almacén (servicios extra) Por ejemplo, en un reparto de 52000 palés a 6800 clientes en un periodo de 20 días, AntRoute obtuvo el diseño diario de rutas en menos de 5 minutos en un PC estándar Los expertos de la empresa necesitaron tres horas Las soluciones de AntRoute fueron de mucha mejor calidad en cuanto al número de rutas necesario, la distancia total recorrida y al aprovechamiento de los vehículos: Trabajamos con empresa de ingeniería para optimizar canalización Se diseñó un modelo automático con criterios que había que Problema real pero que se discretizó (ángulos fijos). Hablando con expertos, múltiples restricciones. Múltiples Objetivos: Reducir longitud total de canales. Reducir número de codos (cambios). Lanzado en 2013. Más de 40 millones de jugadores. 9 héroes. Distintas cartas. Objetivo: Crear mazos para Juego de Cada mazo es una solución. El fitness se mide contra otros mazos. Aprendiendo jugando contra sí mismo. Usando MetaStone, simulador del juego. 82 de victorias mejor solución. 9 turnos para ganar de media. Segundo mejor sistema: 74 victorias competición. La mayoría de los sistemas productivos actuales se basan en líneas de La producción de un ítem se divide en un conjunto de tareas que tienen que llevarse a cabo según un orden concreto y respetando una serie de precedencias Cada tarea necesita un tiempo dado (más un área de trabajo) y tiene El diseño (equilibrado) de la línea requiere agrupar de forma eficiente las tareas necesarias en estaciones de trabajo para maximizar la producción y reducir tiempos muertos El parámetro clave es el tiempo de ciclo que indica el máximo tiempo Los objetivos del equilibrado son: agrupar las tareas en el menor número posible de estaciones de trabajo obtener la agrupación que minimiza el tiempo de ciclo Los algoritmos de OCH se han aplicado con gran éxito al equilibrado de líneas de montaje, resolviendo problemas cada vez más complejos y realistas Trabajamos con la Cátedra Nissan de la UPC para resolver el problema multiobjetivo de minimizar el número de estaciones y su área para un tiempo de ciclo dado en la línea de montaje del motor del Nissan Pathfinder: Es un problema multiobjetivo con muchas restricciones fuertes y un espacio de búsqueda de gran dimensión: oportunidad para metaheurísticas como los algoritmos de OCH El objetivo es proporcionar al ingeniero de planta con diversas opciones de diseño optimales con distinto equilibrio entre ambos objetivos en una sola ejecución del algoritmo Una solución a este problema (TSALBP) es una asociación de tareas a las A 20 C A 16 C A 24 C Hemos diseñado un algoritmo de Optimización de Colonias de Hormigas multiobjetivo que proporciona varias soluciones con un equilibrio distinto entre el área y el número de estaciones al ingeniero de la planta El rastro de feromona se asocia al par (tarea, estación) Introducimos una filosofía multicolonia para obtener un mayor abanico de soluciones posibles: cada hormiga utiliza distintos umbrales de llenado de estación Nuestra propuesta obtiene muy buenos resultados. El algoritmo de Motor del Nissan Pathfinder: 747 piezas y 330 referencias en 6 versiones del motor diesel 378 operaciones de montaje (prueba rápida incluida) agrupadas en 140 79 operarios para un turno de 301 motores Posteriormente diseñamos un algoritmo genético multiobjetivo específico para el TSALBP que mejora los resultados del algoritmo de OCH: Aplicado para un problema Industrial. No se desea predecir una variable, se desea una ecuación Buscando mejorar acierto. Distintos problemas de clasificación: médicos, plantas, Poyatos, J., Molina, D., Martinez, A. D., Del Ser, J., Herrera, F. (2023). EvoPruneDeepTL: An evolutionary pruning model for transfer learning based deep neural networks. Neural Networks, 158, 59-82.  Distintos problemas de clasificación: médicos, plantas, Mejora un 5 de acierto (83-88, 93-98, ). Poyatos, J., Molina, D., Martinez, A. D., Del Ser, J., Herrera, F. (2023). EvoPruneDeepTL: An evolutionary pruning model for transfer learning based deep neural networks. Neural Networks, 158, 59-82.  Aplicar un multi-objetivo para mejorar Más interpretable La superposición craniofacial es una técnica de identificación forense basada en la comparación de un modelo del cráneo encontrado y una foto de una persona desaparecida Proyectando uno sobre otro (solapamiento cráneo-cara), el antropólogo forense puede determinar si pertenecen a la misma persona Diseño de un procedimiento automático basado en el ordenador para automatizar el proceso de identificación forense por superposición craneofacial: Diseño de métodos automáticos de registrado de imágenes de rango para obtener modelos 3D de cráneos (con algoritmos evolutivos, AEs) Diseño de métodos de registrado 3D/2D automáticos para el solapamiento cráneo-cara (con AEs y conjuntos fuzzy) Diseño de un sistema de ayuda a la decisión para asistir al antropólogo forense en la decisión final de la identificación (con visión por ordenador y operadores fuzzy) Proyectos Plan Nacional IDI (2006-09, 2009-12, 2013-15, 2016-18, 19-21) y Excelencia Junta de Andalucía (2007-10, 2013-18, 2020-22). Patente internacional comercializada 2011. Proyecto Europeo FP7-Security MEPROCS (2012-14). Premios Internacionales ? ? ? Identificación {Positiva/negativa/ probable positiva/probable negativa/ indeterminada} RI 3D-2D: traslación, rotación, escalado, y proyección 2D Se ha llegado a crear una spin-off, Panacea Cooperative Producto comercial: Skeleton-Id  s Algoritmos Meméticos con codificación real para el modelado 3D de cráneos. Representación de una solución a este problema: Ejex Ejey Ejez tx ty tz Eje (Ejex, Ejey,Ejez) Entrada: vistas 3D Solapamiento automático cráneo-cara mediante Registrado de Imágenes (RI) Evolutivo Solución final: escenario original replicado mediante RI 3D-2D Solución final: escenario original replicado mediante RI 3D-2D (Algoritmo Evolutivo con Codificación Real) f f Evaluación f Rotación {60,(0,1,0)} Traslación {2, 0, 1} f Distancias entre landmarks cráneo-cara. Los puntos no casan Nuestro método incorpora información de esas distancias para obtener Area deviation error: 34.70 Area deviation error: 13.23 Area deviation error: 32.64 Area deviation error: 15.84 Existen distinto tipo de software de metaheurísticas. No muy maduro. Código separado de autores de algoritmos. Distintos frameworks, no compatibles. Orientados a desarrollo de algoritmos, no usuario Distintos entornos y lenguajes: Matlab (mayoritario), Para muchos algoritmos es muy cómodo trabajar con Existen librerías para distintos lenguajes que pueden ser Ejemplo para distintos lenguajes (hay muchos más): Java: Jblas C: Eigen, Armadillo Python: Numpy Rust: ndarray Julia, Matlab, R: en el propio lenguaje Para desarrollar las prácticas de la asignatura se podrá emplear el entorno/lenguaje que se desee. El profesor de prácticas proporcionará distintos códigos El alumno deberá indicar el software considerado en su documentación de prácticas y proporcionar las fuentes y los ejecutables realizados Para desarrollar las prácticas de la asignatura se podrá emplear el entorno/lenguaje que se desee. ¿Puedo elegir? Sí, no es una asignatura centrada en desarrollo, interesa Seguir un esquema API pero adaptable al lenguaje Lenguaje bajo nivel: (C,Java, Rust) adecuados pero mejor Python: Cuidado si no se conoce cómo optimizar la función de fitness (uso de numpy/numba). Matlab: no recomendada, software libre compatible (Octave) lento y errores. Julia: Falta de conocimiento/experiencia. jMetal (Java) ó jMetalPy (Python) Algoritmos Multi-objetivo. Fácil de usar, problemas PlatEMO Muchos algoritmos. Implementado en Se programa, permite Bien documentado. ECJ, Java Configurable con ficheros de texto. Sólo requiere programar la función objetivo. Jenetics, Java Sólo de algoritmos genéticos. Bien documentado. Optaplanner, Java Planificación y Enrutado. Ámbito concreto. Bien documentado. Inspyred, Python Muchos algoritmos. Fácil de usar. Pyswarms, Python Limitado a PSO, muy completo. Visualizaciones. Mealpy, Python El más extenso. Implementación deja que desear. No validado autores. JuMP, Julia Optimización. Lenguaje de Modelado. Optimization, Julia Muchos algoritmos. De distinto tipo, evolutivos y exactos. Metaheuristics, Julia Distintas metaheurísticas. Visualizaciones. Evolutionary, Julia Limitado a algoritmos genéticos. Visualizaciones. ParaDisEO, C Paralelismo. Complejo de integrar un problema. Gráficas. OptFrame, C Completo. Complejo de usar. Pagmo, C Completo. Sencillo, mejorable documentación. Interfaz en Python.