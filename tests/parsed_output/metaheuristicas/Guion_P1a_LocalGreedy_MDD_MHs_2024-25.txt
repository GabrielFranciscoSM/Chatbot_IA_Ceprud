--- Página 1 ---
Diferencial (MDD)

--- Página 2 ---
(MDD) descrito en las transparencias del Seminario 2. Para ello, se requerirá que el estudiante adapte los siguientes algoritmos a dicho problema: Algoritmos de Búsqueda Local (BL). La práctica se evalúa sobre un total de 2 puntos, distribuidos de la siguiente forma: BL (1 puntos). Random (0.5 puntos). Greedy (0.5 puntos). La fecha límite de entrega será el el martes 1 de abril de 2025 antes de las 23:55 horas. La El problema de la mínima dispersión diferencial (en inglés, minimum differential dispersion problem, MDD) es un problema de optimización combinatoria consistente en seleccionar un subconjunto M de m elementos (Mm) de un conjunto inicial N de n elementos (con nm) de forma que se minimice la dispersión entre los elementos escogidos. El MDD se puede formular como: Minimizar Max xiM d ijMin xiM d ij con M N,Mm jM jM donde: MDPLIB ( todas pertenecientes al grupo GDK con distancias aleatorias: 50 del grupo GDK-b con distancias reales con, n entre {25, 50, 75, 100, 125, 150}, y m entre 2 y 45 (GDK-bGKD-b_1_n25_m2.txt a GKD-b_50_n150_m45.txt),

--- Página 3 ---
incluye las características (nombre, tamaño y coste de la mejor solución conocida) de las instancias incluido también en las dos localizaciones del espacio de la asignatura (PRADO y web externa) El formato de los ficheros es el siguiente: n(n-1)/2 líneasconelformatoi j d (i,j{0,...,n-1})querecogenelcontenidodelamatriz Ejemplo (GKD-b_50_n150_m45): de elementos seleccionados. Se empleará el movimiento de intercambio Int(Sel,i,j) que intercambia de forma distinta según dos opciones: En orden totalmente aleatorio (randLS). actual (heurLS).

--- Página 4 ---
resultado medio (y a veces la desviación típica) de todas las ejecuciones para representar con mayor se obtengan números en una secuencia lo suficientemente grande (es decir, que no se repitan los números en un margen razonable) como para considerarse aleatoria. En el espacio de PRADO se puede encontrar una implementación en lenguaje C de un generador aleatorio de buena calidad (random.hpp). semillas deben mantenerse en los distintos algoritmos (es decir, la semilla para la primera ejecución de la anterior, etc.). Por simplificar y facilitar la reproducibilidad, se usará la misma semilla para experimento y obtener los mismos resultados si fuera necesario (en caso contrario, los resultados podrían variar en cada ejecución del mismo algoritmo sobre el mismo caso del problema). distintos denominados Desv y Tiempo:

--- Página 5 ---
problema de minimización como el MDD: X ValorAlgoritmo MejorValor Desv 100 i i iCasos i obtienen soluciones de la misma calidad (tienen valores de Desv similares), uno será mejor que el en C (timer) para un cálculo adecuado del tiempo de ejecución de los algoritmos metaheurísticos. elementos seleccionados. Se diseñará una tabla para cada algoritmo (Greedy, LSrandom, LSheur)

--- Página 6 ---


--- Página 7 ---


--- Página 8 ---
f) Breve explicación de la estructura del código de la práctica, incluyendo un pequeño pueda compilarlo (usando un sistema automático como make o similar) y cómo g) Experimentos y análisis de resultados: consideradosenlasejecucionesdecadaalgoritmo(incluyendo las semillas utilizadas). Análisis de resultados. El análisis deberá estar orientado a justificar (según el compor- tamiento de cada algoritmo) los resultados obtenidos en lugar de realizar una mera lectura de las tablas. Se valorará la inclusión de otros elementos de comparación tales h) Referencias bibliográficas u otro tipo de material distinto del proporcionado en la asignatura que se haya consultado para realizar la práctica (en caso de haberlo hecho). construir los ejecutables según el entorno de desarrollo empleado (tales como .prj, makefile, .ide, etc.). En este directorio se adjuntará también un pequeño fichero de texto de nombre LEEME etiquetado con los apellidos y nombre del estudiante (Ej. Pérez Pérez Manuel.zip). Este fichero será algoritmo y su análisis. La inclusión de trabajo voluntario (desarrollo de variantes adicionales, algoritmo,análisisextendido,etc.)podrá incrementar la nota finalporencimadelapuntuación En caso de que el comportamiento del algoritmo en la versión implementada/ desarro- requeridas, se podría reducir hasta en un 50 la calificación del algoritmo correspon-

